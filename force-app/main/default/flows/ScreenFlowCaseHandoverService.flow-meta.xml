<?xml version="1.0" encoding="UTF-8"?>
<Flow xmlns="http://soap.sforce.com/2006/04/metadata">
    <actionCalls>
        <name>CloseTab</name>
        <label>Close Tab</label>
        <locationX>2673</locationX>
        <locationY>4154</locationY>
        <actionName>c:CloseTab</actionName>
        <actionType>component</actionType>
        <flowTransactionModel>CurrentTransaction</flowTransactionModel>
    </actionCalls>
    <actionCalls>
        <name>CollabEmailToZendesk</name>
        <label>Collab Email To Zendesk</label>
        <locationX>50</locationX>
        <locationY>1622</locationY>
        <actionName>emailSimple</actionName>
        <actionType>emailSimple</actionType>
        <connector>
            <targetReference>UpdateCurrentCase</targetReference>
        </connector>
        <flowTransactionModel>CurrentTransaction</flowTransactionModel>
        <inputParameters>
            <name>emailAddresses</name>
            <value>
                <elementReference>selectedTeamRecord.ZendeskEmail__c</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>emailSubject</name>
            <value>
                <elementReference>ZendeskCollabEmailSubject</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>emailBody</name>
            <value>
                <elementReference>ZendeskCollabEmailBody</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>sendRichBody</name>
            <value>
                <booleanValue>true</booleanValue>
            </value>
        </inputParameters>
        <inputParameters>
            <name>relatedRecordId</name>
            <value>
                <elementReference>recordId.Id</elementReference>
            </value>
        </inputParameters>
    </actionCalls>
    <actionCalls>
        <name>New_Owner_Custom_Notification</name>
        <label>New Owner Custom Notification</label>
        <locationX>3174</locationX>
        <locationY>3278</locationY>
        <actionName>customNotificationAction</actionName>
        <actionType>customNotificationAction</actionType>
        <connector>
            <targetReference>GetOwnerName</targetReference>
        </connector>
        <flowTransactionModel>CurrentTransaction</flowTransactionModel>
        <inputParameters>
            <name>customNotifTypeId</name>
            <value>
                <elementReference>Get_Custom_Notification_Type.Id</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>recipientIds</name>
            <value>
                <elementReference>NotificationRecipientIDs</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>title</name>
            <value>
                <elementReference>BulkNotificationTitle</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>body</name>
            <value>
                <elementReference>BulkNotificationBody</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>targetPageRef</name>
            <value>
                <elementReference>BulkNotificationTargetPageReference</elementReference>
            </value>
        </inputParameters>
    </actionCalls>
    <actionCalls>
        <name>ToastMessageBulk</name>
        <label>ToastMessageBulk</label>
        <locationX>2541</locationX>
        <locationY>3962</locationY>
        <actionName>c:showToast</actionName>
        <actionType>component</actionType>
        <connector>
            <targetReference>CloseTab</targetReference>
        </connector>
        <flowTransactionModel>CurrentTransaction</flowTransactionModel>
        <inputParameters>
            <name>type</name>
            <value>
                <stringValue>success</stringValue>
            </value>
        </inputParameters>
        <inputParameters>
            <name>message</name>
            <value>
                <elementReference>HandoverToastMessageBulk</elementReference>
            </value>
        </inputParameters>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </actionCalls>
    <actionCalls>
        <name>ToastMessageSingle</name>
        <label>ToastMessageSingle</label>
        <locationX>2805</locationX>
        <locationY>3962</locationY>
        <actionName>c:showToast</actionName>
        <actionType>component</actionType>
        <connector>
            <targetReference>CloseTab</targetReference>
        </connector>
        <flowTransactionModel>CurrentTransaction</flowTransactionModel>
        <inputParameters>
            <name>type</name>
            <value>
                <stringValue>success</stringValue>
            </value>
        </inputParameters>
        <inputParameters>
            <name>message</name>
            <value>
                <elementReference>HandoverToastMessage</elementReference>
            </value>
        </inputParameters>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </actionCalls>
    <actionCalls>
        <name>TransferEmailToZendesk</name>
        <label>Transfer Email To Zendesk</label>
        <locationX>314</locationX>
        <locationY>1622</locationY>
        <actionName>emailSimple</actionName>
        <actionType>emailSimple</actionType>
        <connector>
            <targetReference>UpdateCurrentCase</targetReference>
        </connector>
        <flowTransactionModel>CurrentTransaction</flowTransactionModel>
        <inputParameters>
            <name>emailAddresses</name>
            <value>
                <elementReference>selectedTeamRecord.ZendeskEmail__c</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>emailSubject</name>
            <value>
                <elementReference>ZendeskTransferEmailSubject</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>emailBody</name>
            <value>
                <elementReference>ZendeskTransferEmailBody</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>sendRichBody</name>
            <value>
                <booleanValue>true</booleanValue>
            </value>
        </inputParameters>
        <inputParameters>
            <name>relatedRecordId</name>
            <value>
                <elementReference>recordId.Id</elementReference>
            </value>
        </inputParameters>
    </actionCalls>
    <apiVersion>57.0</apiVersion>
    <assignments>
        <name>Add_Case_Comment_to_Collection_Queue</name>
        <label>Add Case Comment to Collection Queue</label>
        <locationX>3658</locationX>
        <locationY>2438</locationY>
        <assignmentItems>
            <assignToReference>CaseComments</assignToReference>
            <operator>Add</operator>
            <value>
                <elementReference>CaseComment</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>Loop_Cases_Bulk_Handover</targetReference>
        </connector>
    </assignments>
    <assignments>
        <name>Add_Cases_To_Collection_Queue</name>
        <label>Add Cases To Collection Queue</label>
        <locationX>3658</locationX>
        <locationY>2222</locationY>
        <assignmentItems>
            <assignToReference>Cases</assignToReference>
            <operator>Add</operator>
            <value>
                <elementReference>Loop_Cases_Bulk_Handover</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>Set_Case_Comment_Values_Queue</targetReference>
        </connector>
    </assignments>
    <assignments>
        <name>Assign_Case_Count</name>
        <label>Assign Case Count</label>
        <locationX>3306</locationX>
        <locationY>782</locationY>
        <assignmentItems>
            <assignToReference>varCaseCount</assignToReference>
            <operator>AssignCount</operator>
            <value>
                <elementReference>CasesToBulkHandover.selectedRows</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>New_Owner_Type_2</targetReference>
        </connector>
    </assignments>
    <assignments>
        <name>Assign_Notification_Recipients</name>
        <label>Assign Notification Recipients</label>
        <locationX>3174</locationX>
        <locationY>3170</locationY>
        <assignmentItems>
            <assignToReference>NotificationRecipientIDs</assignToReference>
            <operator>Add</operator>
            <value>
                <elementReference>NewOwnerUser.selectedValue</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>New_Owner_Custom_Notification</targetReference>
        </connector>
    </assignments>
    <assignments>
        <name>Assign_Owner_Id_User</name>
        <label>Assign Owner Id User</label>
        <locationX>3350</locationX>
        <locationY>998</locationY>
        <assignmentItems>
            <assignToReference>recordId.OwnerId</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>NewOwnerUser.selectedValue</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>Loop_Cases_Bulk_Handover</targetReference>
        </connector>
    </assignments>
    <assignments>
        <name>AssignCaseCountBulk</name>
        <label>Assign Owner Id Queue</label>
        <locationX>2998</locationX>
        <locationY>1106</locationY>
        <assignmentItems>
            <assignToReference>recordId.OwnerId</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>GetGroupFromTeamBulk.outGroup.Id</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>Valid_Queue_2</targetReference>
        </connector>
    </assignments>
    <assignments>
        <name>AssignRecordType</name>
        <label>Assign RecordType</label>
        <locationX>380</locationX>
        <locationY>998</locationY>
        <assignmentItems>
            <assignToReference>recordId.RecordTypeId</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>FlipRecordTypeChoice</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>UpdateCaseVariable</targetReference>
        </connector>
    </assignments>
    <assignments>
        <name>ClearError</name>
        <label>ClearError + populate variables</label>
        <locationX>2673</locationX>
        <locationY>350</locationY>
        <assignmentItems>
            <assignToReference>ErrorMessage</assignToReference>
            <operator>Assign</operator>
            <value>
                <stringValue></stringValue>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>varFinalInternalComment</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>InputInternalComment</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>HandoverReason</targetReference>
        </connector>
    </assignments>
    <assignments>
        <name>Set_Case_Comment_Values_Queue</name>
        <label>Set Case Comment Values Queue</label>
        <locationX>3658</locationX>
        <locationY>2330</locationY>
        <assignmentItems>
            <assignToReference>CaseComment.CommentBody</assignToReference>
            <operator>Assign</operator>
            <value>
                <stringValue>Bulk Handover (part of {!varCaseCount}): {!varFinalInternalComment}</stringValue>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>CaseComment.IsPublished</assignToReference>
            <operator>Assign</operator>
            <value>
                <booleanValue>false</booleanValue>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>CaseComment.ParentId</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>Loop_Cases_Bulk_Handover.Id</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>Add_Case_Comment_to_Collection_Queue</targetReference>
        </connector>
    </assignments>
    <assignments>
        <name>Set_Case_Fields</name>
        <label>Set Case Fields</label>
        <locationX>3658</locationX>
        <locationY>1814</locationY>
        <assignmentItems>
            <assignToReference>Loop_Cases_Bulk_Handover.Status</assignToReference>
            <operator>Assign</operator>
            <value>
                <stringValue>Handover</stringValue>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>Loop_Cases_Bulk_Handover.AllowHandover__c</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>forUpdateAllowHandover</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>New_Owner_Type</targetReference>
        </connector>
    </assignments>
    <assignments>
        <name>Set_Team_Case_Values</name>
        <label>Set Team Case Values</label>
        <locationX>3394</locationX>
        <locationY>2030</locationY>
        <assignmentItems>
            <assignToReference>Loop_Cases_Bulk_Handover.OwnerId</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>GetGroupFromTeamBulk.outGroup.Id</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>Loop_Cases_Bulk_Handover.UseBusinessModelForRouting__c</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>selectedTeamRecord.BusinessModelRouting__c</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>Loop_Cases_Bulk_Handover.UseRegionForRouting__c</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>selectedTeamRecord.RegionRouting__c</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>Loop_Cases_Bulk_Handover.OmniFlowRouting__c</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>selectedTeamRecord.OmniFlowRouting__c</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>Loop_Cases_Bulk_Handover.OmniBaseSkill__c</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>selectedTeamRecord.BaseSkill__c</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>Add_Cases_To_Collection_Queue</targetReference>
        </connector>
    </assignments>
    <assignments>
        <name>Set_User_Case_Values</name>
        <label>Set User Case Values</label>
        <locationX>3658</locationX>
        <locationY>2030</locationY>
        <assignmentItems>
            <assignToReference>Loop_Cases_Bulk_Handover.OwnerId</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>NewOwnerUser.selectedValue</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>Loop_Cases_Bulk_Handover.NotifyNewOwner__c</assignToReference>
            <operator>Assign</operator>
            <value>
                <booleanValue>false</booleanValue>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>Add_Cases_To_Collection_Queue</targetReference>
        </connector>
    </assignments>
    <assignments>
        <name>SetCaseOwnerUser</name>
        <label>Set Case Owner</label>
        <locationX>4406</locationX>
        <locationY>674</locationY>
        <assignmentItems>
            <assignToReference>recordId.OwnerId</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>NewOwnerUser.selectedValue</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>recordId.NotifyNewOwner__c</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>NotifyTheNewOwner</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <isGoTo>true</isGoTo>
            <targetReference>SetCaseStatus</targetReference>
        </connector>
    </assignments>
    <assignments>
        <name>SetCaseStatus</name>
        <label>Set Case Status</label>
        <locationX>842</locationX>
        <locationY>1730</locationY>
        <assignmentItems>
            <assignToReference>recordId.Status</assignToReference>
            <operator>Assign</operator>
            <value>
                <stringValue>Handover</stringValue>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>recordId.AllowHandover__c</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>forUpdateAllowHandover</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>UpdateCurrentCase</targetReference>
        </connector>
    </assignments>
    <assignments>
        <name>SetErrorMessage</name>
        <label>SetErrorMessage</label>
        <locationX>2162</locationX>
        <locationY>566</locationY>
        <assignmentItems>
            <assignToReference>ErrorMessage</assignToReference>
            <operator>Assign</operator>
            <value>
                <stringValue>Please select a handover reason.</stringValue>
            </value>
        </assignmentItems>
        <connector>
            <isGoTo>true</isGoTo>
            <targetReference>ScreenSelectReason</targetReference>
        </connector>
    </assignments>
    <assignments>
        <description>Show user they selected the wrong handover reason. Used in the Select Reason Screen</description>
        <name>SetErrorMessage2</name>
        <label>Set Error Message</label>
        <locationX>2426</locationX>
        <locationY>566</locationY>
        <assignmentItems>
            <assignToReference>ErrorMessage</assignToReference>
            <operator>Assign</operator>
            <value>
                <stringValue>Please select a different handover reason.</stringValue>
            </value>
        </assignmentItems>
        <connector>
            <isGoTo>true</isGoTo>
            <targetReference>ScreenSelectReason</targetReference>
        </connector>
    </assignments>
    <assignments>
        <description>Sets the error message when the DML on case raises an error.</description>
        <name>SetErrorMessageDML</name>
        <label>Set Error Message</label>
        <locationX>1370</locationX>
        <locationY>2114</locationY>
        <assignmentItems>
            <assignToReference>ErrorMessage</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>$Flow.FaultMessage</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>ExceptionScreen</targetReference>
        </connector>
    </assignments>
    <assignments>
        <description>Display an error message that the chosen taxonomy does not produce a valid new Queue owner</description>
        <name>SetErrorMessageInvalidOwner</name>
        <label>Set Error Message</label>
        <locationX>1634</locationX>
        <locationY>782</locationY>
        <assignmentItems>
            <assignToReference>ErrorMessage</assignToReference>
            <operator>Assign</operator>
            <value>
                <stringValue>The chosen Type, Sub-Type and Topic are not assigned to a queue. Please choose different options.</stringValue>
            </value>
        </assignmentItems>
        <connector>
            <isGoTo>true</isGoTo>
            <targetReference>ScreenSelectReason</targetReference>
        </connector>
    </assignments>
    <assignments>
        <name>SetOwnerAndRoutingFields</name>
        <label>Set Owner And Routing Fields</label>
        <locationX>842</locationX>
        <locationY>1622</locationY>
        <assignmentItems>
            <assignToReference>recordId.OwnerId</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>GetGroupFromTeam.outGroup.Id</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>recordId.UseBusinessModelForRouting__c</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>selectedTeamRecord.BusinessModelRouting__c</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>recordId.UseRegionForRouting__c</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>selectedTeamRecord.RegionRouting__c</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>recordId.OmniFlowRouting__c</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>selectedTeamRecord.OmniFlowRouting__c</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>recordId.OmniBaseSkill__c</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>selectedTeamRecord.BaseSkill__c</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>SetCaseStatus</targetReference>
        </connector>
    </assignments>
    <assignments>
        <name>UpdateCaseFieldsZendeskCollaboration</name>
        <label>Update Case fields</label>
        <locationX>50</locationX>
        <locationY>1514</locationY>
        <assignmentItems>
            <assignToReference>recordId.Status</assignToReference>
            <operator>Assign</operator>
            <value>
                <stringValue>In Progress</stringValue>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>varFinalInternalComment</assignToReference>
            <operator>Add</operator>
            <value>
                <elementReference>ZendeskCollaborationInternalComment</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>CollabEmailToZendesk</targetReference>
        </connector>
    </assignments>
    <assignments>
        <description>Set SelectedTeamRecord Variable</description>
        <name>UpdateCaseVariable</name>
        <label>Update Variables</label>
        <locationX>512</locationX>
        <locationY>1190</locationY>
        <assignmentItems>
            <assignToReference>selectedTeamRecord</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>GetNewTeam.ServiceTeam</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>ZendeskCase</targetReference>
        </connector>
    </assignments>
    <assignments>
        <name>UpdateCaseZendeskTransfer</name>
        <label>Update Case fields</label>
        <locationX>314</locationX>
        <locationY>1514</locationY>
        <assignmentItems>
            <assignToReference>recordId.Status</assignToReference>
            <operator>Assign</operator>
            <value>
                <stringValue>Completed</stringValue>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>recordId.Autoclosed__c</assignToReference>
            <operator>Assign</operator>
            <value>
                <booleanValue>true</booleanValue>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>recordId.AutoCloseReason__c</assignToReference>
            <operator>Assign</operator>
            <value>
                <stringValue>Zendesk Transfer</stringValue>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>varFinalInternalComment</assignToReference>
            <operator>Add</operator>
            <value>
                <elementReference>ZendeskTransferInternalComment</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>TransferEmailToZendesk</targetReference>
        </connector>
    </assignments>
    <choices>
        <name>CurrentRecordTypeChoice</name>
        <choiceText>{!recordId.RecordType.Name}</choiceText>
        <dataType>String</dataType>
        <value>
            <elementReference>recordId.RecordTypeId</elementReference>
        </value>
    </choices>
    <choices>
        <name>ProposedRecordTypeChoice</name>
        <choiceText>{!GetNewTeam.RecordType.Name}</choiceText>
        <dataType>String</dataType>
        <value>
            <elementReference>GetNewTeam.RecordType.Id</elementReference>
        </value>
    </choices>
    <constants>
        <name>BulkNotificationTargetPageReference</name>
        <dataType>String</dataType>
        <value>
            <stringValue>{&quot;type&quot;: &quot;standard__objectPage&quot;,&quot;attributes&quot;: {&quot;objectApiName&quot;: &quot;Case&quot;,&quot;actionName&quot;: &quot;list&quot;},&quot;state&quot;:{&quot;filterName&quot;:&quot;Recent&quot;}}</stringValue>
        </value>
    </constants>
    <constants>
        <name>customNotifType</name>
        <dataType>String</dataType>
        <value>
            <stringValue>NotifyTheOwnerOnACaseReply</stringValue>
        </value>
    </constants>
    <decisions>
        <description>Checks if the running user has the correct permission to run this flow</description>
        <name>Access</name>
        <label>Access?</label>
        <locationX>3671</locationX>
        <locationY>134</locationY>
        <defaultConnector>
            <targetReference>NoAccessScreen</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>User does not have access</defaultConnectorLabel>
        <rules>
            <name>UserHasAccess</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>$Permission.FlowCaseHandover</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <booleanValue>true</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>ScreenSelectReason</targetReference>
            </connector>
            <label>User has Access</label>
        </rules>
    </decisions>
    <decisions>
        <description>Check if the recordtype that belongs to this taxonomy is the same as the current recordtype.</description>
        <name>CheckRecordType</name>
        <label>Check RecordType</label>
        <locationX>512</locationX>
        <locationY>782</locationY>
        <defaultConnector>
            <targetReference>UpdateCaseVariable</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Default Outcome</defaultConnectorLabel>
        <rules>
            <name>FlipRecordtype</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>GetNewTeam.RecordType.Id</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>recordId.RecordTypeId</leftValueReference>
                <operator>NotEqualTo</operator>
                <rightValue>
                    <elementReference>GetNewTeam.RecordType.Id</elementReference>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>FlipRecordTypeScreen</targetReference>
            </connector>
            <label>Flip Recordtype</label>
        </rules>
    </decisions>
    <decisions>
        <description>Check what path to take based on the information entered by the user.</description>
        <name>HandoverReason</name>
        <label>Handover Reason</label>
        <locationX>2673</locationX>
        <locationY>458</locationY>
        <defaultConnector>
            <targetReference>NewOwnerType</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Other Reason</defaultConnectorLabel>
        <rules>
            <name>Wrongly_Routed</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>recordId.HandoverReason__c</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Case Wrongly Assigned Or Routed</stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>inputOverrideTaxonomy</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>GetNewTeam</targetReference>
            </connector>
            <label>Wrongly Routed</label>
        </rules>
        <rules>
            <name>Hypercare</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>recordId.HandoverReason__c</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Hypercare</stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>inputOverrideTaxonomy</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <isGoTo>true</isGoTo>
                <targetReference>GetNewTeam</targetReference>
            </connector>
            <label>Hypercare</label>
        </rules>
        <rules>
            <name>Not_Populated</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>recordId.HandoverReason__c</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>true</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>SetErrorMessage</targetReference>
            </connector>
            <label>Not Populated</label>
        </rules>
        <rules>
            <name>Status_New_not_Wrongly_Routed</name>
            <conditionLogic>(1 AND 2 AND 3) OR (2 AND 4 AND 5)</conditionLogic>
            <conditions>
                <leftValueReference>recordId.Status</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>New</stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>recordId.HandoverReason__c</leftValueReference>
                <operator>NotEqualTo</operator>
                <rightValue>
                    <stringValue></stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>recordId.HandoverReason__c</leftValueReference>
                <operator>NotEqualTo</operator>
                <rightValue>
                    <stringValue>Case Wrongly Assigned Or Routed</stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>recordId.HandoverReason__c</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Escalated</stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>recordId.IsEscalated</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>SetErrorMessage2</targetReference>
            </connector>
            <label>Status New, not Wrongly Routed</label>
        </rules>
        <rules>
            <name>Bulk_Agent_Is_Out_Of_Office</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>recordId.HandoverReason__c</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Agent Is Out Of Office</stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>bulkHandoverCases</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <booleanValue>true</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>Get_Cases_Bulk_Handover</targetReference>
            </connector>
            <label>Bulk - Agent Is Out Of Office</label>
        </rules>
    </decisions>
    <decisions>
        <description>Owner can be either a Queue or an User. Set owner from the applicable field.</description>
        <name>New_Owner_Type</name>
        <label>New Owner Type</label>
        <locationX>3658</locationX>
        <locationY>1922</locationY>
        <defaultConnector>
            <targetReference>Add_Cases_To_Collection_Queue</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Default Outcome</defaultConnectorLabel>
        <rules>
            <name>TeamOwner</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>NewOwnerIsTeam</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <booleanValue>true</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>Set_Team_Case_Values</targetReference>
            </connector>
            <label>Team</label>
        </rules>
        <rules>
            <name>UserOwner</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>NewOwnerIsTeam</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>Set_User_Case_Values</targetReference>
            </connector>
            <label>User</label>
        </rules>
    </decisions>
    <decisions>
        <description>Owner can be either a Queue or an User. Set owner from the applicable field.</description>
        <name>New_Owner_Type_2</name>
        <label>New Owner Type</label>
        <locationX>3306</locationX>
        <locationY>890</locationY>
        <defaultConnector>
            <isGoTo>true</isGoTo>
            <targetReference>ScreenSelectReason</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Default Outcome</defaultConnectorLabel>
        <rules>
            <name>Team_2</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>NewOwnerIsTeam</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <booleanValue>true</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>GetGroupFromTeamBulk</targetReference>
            </connector>
            <label>Team</label>
        </rules>
        <rules>
            <name>User</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>NewOwnerIsTeam</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>Assign_Owner_Id_User</targetReference>
            </connector>
            <label>User</label>
        </rules>
    </decisions>
    <decisions>
        <description>Owner can be either a Queue or an User. Set owner from the applicable field.</description>
        <name>NewOwner</name>
        <label>New Owner</label>
        <locationX>3306</locationX>
        <locationY>2846</locationY>
        <defaultConnector>
            <targetReference>GetOwnerName</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Default Outcome</defaultConnectorLabel>
        <rules>
            <name>Is_Team</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>NewOwnerIsTeam</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <booleanValue>true</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>GetOwnerName</targetReference>
            </connector>
            <label>Is Team</label>
        </rules>
        <rules>
            <name>Is_User</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>NewOwnerIsTeam</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>Get_Custom_Notification_Type</targetReference>
            </connector>
            <label>Is User</label>
        </rules>
    </decisions>
    <decisions>
        <description>Owner can be either a Queue or an User. Set owner from the applicable field.</description>
        <name>NewOwnerType</name>
        <label>New Owner Type</label>
        <locationX>4274</locationX>
        <locationY>566</locationY>
        <defaultConnector>
            <targetReference>SetCaseOwnerUser</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Default Outcome</defaultConnectorLabel>
        <rules>
            <name>Team</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>NewOwnerIsTeam</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <booleanValue>true</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <isGoTo>true</isGoTo>
                <targetReference>ZendeskCase</targetReference>
            </connector>
            <label>Team</label>
        </rules>
    </decisions>
    <decisions>
        <name>Notification_Type_Found</name>
        <label>Notification Type Found?</label>
        <locationX>3306</locationX>
        <locationY>3062</locationY>
        <defaultConnector>
            <targetReference>GetOwnerName</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>NOT Found</defaultConnectorLabel>
        <rules>
            <name>Found</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>Get_Custom_Notification_Type</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>Assign_Notification_Recipients</targetReference>
            </connector>
            <label>Found</label>
        </rules>
    </decisions>
    <decisions>
        <name>Single_or_Bulk</name>
        <label>Single or Bulk</label>
        <locationX>2673</locationX>
        <locationY>3854</locationY>
        <defaultConnector>
            <targetReference>ToastMessageSingle</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Default Outcome</defaultConnectorLabel>
        <rules>
            <name>Bulk</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>bulkHandoverCases</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <booleanValue>true</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>ToastMessageBulk</targetReference>
            </connector>
            <label>Bulk</label>
        </rules>
    </decisions>
    <decisions>
        <name>Valid_Queue_2</name>
        <label>Valid Queue</label>
        <locationX>2998</locationX>
        <locationY>1214</locationY>
        <defaultConnector>
            <targetReference>No_Queue_Retuned_Screen</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Default Outcome</defaultConnectorLabel>
        <rules>
            <name>ValidQueue_2</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>GetGroupFromTeamBulk.outGroup.Id</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>Loop_Cases_Bulk_Handover</targetReference>
            </connector>
            <label>ValidQueue</label>
        </rules>
    </decisions>
    <decisions>
        <name>ValidNewOwner</name>
        <label>Valid New Owner?</label>
        <locationX>1073</locationX>
        <locationY>674</locationY>
        <defaultConnector>
            <targetReference>SetErrorMessageInvalidOwner</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>InvalidOwner</defaultConnectorLabel>
        <rules>
            <name>ValidOwner</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>GetNewTeam.ServiceTeam.Id</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>CheckRecordType</targetReference>
            </connector>
            <label>Valid Owner</label>
        </rules>
    </decisions>
    <decisions>
        <name>ValidQueue</name>
        <label>Valid Queue</label>
        <locationX>974</locationX>
        <locationY>1514</locationY>
        <defaultConnector>
            <targetReference>NoQueueRetunedScreen</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Default Outcome</defaultConnectorLabel>
        <rules>
            <name>ValidQueueReturned</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>GetGroupFromTeam.outGroup.Id</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>SetOwnerAndRoutingFields</targetReference>
            </connector>
            <label>ValidQueue</label>
        </rules>
    </decisions>
    <decisions>
        <description>Checks if the selected team is working in Zendesk, and if it is a collaboration or transfer.</description>
        <name>ZendeskCase</name>
        <label>Zendesk team?</label>
        <locationX>512</locationX>
        <locationY>1298</locationY>
        <defaultConnector>
            <targetReference>GetGroupFromTeam</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Default Outcome</defaultConnectorLabel>
        <rules>
            <name>ZendeskCollaboration</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>selectedTeamRecord.IsWorkingInZendesk__c</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <booleanValue>true</booleanValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>recordId.HandoverReason__c</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Pass On Responsibility For Case Completion</stringValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>ZendeskCollaborationScreen</targetReference>
            </connector>
            <label>Zendesk (Collaboration)</label>
        </rules>
        <rules>
            <name>ZendeskTransfer</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>selectedTeamRecord.IsWorkingInZendesk__c</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <booleanValue>true</booleanValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>recordId.HandoverReason__c</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Case Wrongly Assigned Or Routed</stringValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>ZendeskTransferScreen</targetReference>
            </connector>
            <label>Zendesk (Transfer)</label>
        </rules>
        <rules>
            <name>Zendesk_Invalid</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>selectedTeamRecord.IsWorkingInZendesk__c</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <booleanValue>true</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>ZendeskInvalidScreen</targetReference>
            </connector>
            <label>Zendesk (Invalid)</label>
        </rules>
    </decisions>
    <description>Build feature bulk handover for OOO with review changes. With Bulk Notification. Update Bulk Handover Maximum Selection.</description>
    <dynamicChoiceSets>
        <name>ServiceTeamRecordChoiceSet</name>
        <dataType>String</dataType>
        <displayField>MasterLabel</displayField>
        <object>ServiceTeam__mdt</object>
        <outputAssignments>
            <assignToReference>selectedTeamRecord.BaseSkill__c</assignToReference>
            <field>BaseSkill__c</field>
        </outputAssignments>
        <outputAssignments>
            <assignToReference>selectedTeamRecord.BusinessModelRouting__c</assignToReference>
            <field>BusinessModelRouting__c</field>
        </outputAssignments>
        <outputAssignments>
            <assignToReference>selectedTeamRecord.DeveloperName</assignToReference>
            <field>DeveloperName</field>
        </outputAssignments>
        <outputAssignments>
            <assignToReference>selectedTeamRecord.Id</assignToReference>
            <field>Id</field>
        </outputAssignments>
        <outputAssignments>
            <assignToReference>selectedTeamRecord.IsWorkingInZendesk__c</assignToReference>
            <field>IsWorkingInZendesk__c</field>
        </outputAssignments>
        <outputAssignments>
            <assignToReference>selectedTeamRecord.Label</assignToReference>
            <field>Label</field>
        </outputAssignments>
        <outputAssignments>
            <assignToReference>selectedTeamRecord.MasterLabel</assignToReference>
            <field>MasterLabel</field>
        </outputAssignments>
        <outputAssignments>
            <assignToReference>selectedTeamRecord.OmniFlowRouting__c</assignToReference>
            <field>OmniFlowRouting__c</field>
        </outputAssignments>
        <outputAssignments>
            <assignToReference>selectedTeamRecord.QualifiedApiName</assignToReference>
            <field>QualifiedApiName</field>
        </outputAssignments>
        <outputAssignments>
            <assignToReference>selectedTeamRecord.QueueDeveloperName__c</assignToReference>
            <field>QueueDeveloperName__c</field>
        </outputAssignments>
        <outputAssignments>
            <assignToReference>selectedTeamRecord.RegionRouting__c</assignToReference>
            <field>RegionRouting__c</field>
        </outputAssignments>
        <outputAssignments>
            <assignToReference>selectedTeamRecord.UnclassifiedQueueDeveloperName__c</assignToReference>
            <field>UnclassifiedQueueDeveloperName__c</field>
        </outputAssignments>
        <outputAssignments>
            <assignToReference>selectedTeamRecord.ZendeskEmail__c</assignToReference>
            <field>ZendeskEmail__c</field>
        </outputAssignments>
        <sortField>Label</sortField>
        <sortOrder>Asc</sortOrder>
        <valueField>DeveloperName</valueField>
    </dynamicChoiceSets>
    <environments>Default</environments>
    <formulas>
        <name>bulkBulkHandoverPermission</name>
        <dataType>Boolean</dataType>
        <expression>{!$Permission.ServiceCaseBulkHandover}</expression>
    </formulas>
    <formulas>
        <description>Formula to determine if case owner email is coming from a queue or user</description>
        <name>CaseOwnerEmailFormula</name>
        <dataType>String</dataType>
        <expression>IF(
ISBLANK({!recordId.Owner:Group.Email}),
{!recordId.Owner:User.Email},
{!recordId.Owner:Group.Email}
)</expression>
    </formulas>
    <formulas>
        <description>Based on the field Case Owner Formula but without the hyperlink, to be used in text template to display the case owner (user vs queue)</description>
        <name>CaseOwnerFormula</name>
        <dataType>String</dataType>
        <expression>IF(
ISBLANK({!recordId.Owner:Group.Id}),
{!recordId.Owner:User.FirstName} &amp; &quot; &quot; &amp; {!recordId.Owner:User.LastName},
{!recordId.Owner:Group.Name}
)</expression>
    </formulas>
    <formulas>
        <name>CaseOwnerIsUser</name>
        <dataType>Boolean</dataType>
        <expression>IF(
ISBLANK({!recordId.Owner:Group.Id}),
true,
false
)</expression>
    </formulas>
    <formulas>
        <name>forUpdateAllowHandover</name>
        <dataType>Boolean</dataType>
        <expression>IF(ISNULL({!varCaseCount}),
         IF({!recordId.AllowHandover__c} = TRUE,
         FALSE,
         TRUE),
IF(
{!Loop_Cases_Bulk_Handover.AllowHandover__c} = TRUE, FALSE,
TRUE)
)</expression>
    </formulas>
    <formulas>
        <description>Depending on whether the owner of the case is a user or a group, we show a different name field</description>
        <name>NewCaseOwner</name>
        <dataType>String</dataType>
        <expression>IF(
  LEFT({!recordId.OwnerId}, 3) = &quot;00G&quot;, /* 00G is a Queue/Group, 005 is a user */
  {!recordId.Owner:Group.Name}, 
{!GetOwnerName.Name}
)</expression>
    </formulas>
    <interviewLabel>Screen-Flow Case Handover (Service) {!$Flow.CurrentDateTime}</interviewLabel>
    <label>Screen-Flow Case Handover (Service)</label>
    <loops>
        <name>Loop_Cases_Bulk_Handover</name>
        <label>Loop Cases Bulk Handover</label>
        <locationX>3306</locationX>
        <locationY>1706</locationY>
        <collectionReference>CasesToBulkHandover.selectedRows</collectionReference>
        <iterationOrder>Asc</iterationOrder>
        <nextValueConnector>
            <targetReference>Set_Case_Fields</targetReference>
        </nextValueConnector>
        <noMoreValuesConnector>
            <targetReference>Update_Cases</targetReference>
        </noMoreValuesConnector>
    </loops>
    <processMetadataValues>
        <name>BuilderType</name>
        <value>
            <stringValue>LightningFlowBuilder</stringValue>
        </value>
    </processMetadataValues>
    <processMetadataValues>
        <name>CanvasMode</name>
        <value>
            <stringValue>AUTO_LAYOUT_CANVAS</stringValue>
        </value>
    </processMetadataValues>
    <processMetadataValues>
        <name>OriginBuilderType</name>
        <value>
            <stringValue>LightningFlowBuilder</stringValue>
        </value>
    </processMetadataValues>
    <processType>Flow</processType>
    <recordCreates>
        <name>Create_Case_Comments</name>
        <label>Create Case Comments</label>
        <locationX>3306</locationX>
        <locationY>2738</locationY>
        <connector>
            <targetReference>NewOwner</targetReference>
        </connector>
        <inputReference>CaseComments</inputReference>
    </recordCreates>
    <recordCreates>
        <name>CreateCaseComment</name>
        <label>Create Case Comment</label>
        <locationX>512</locationX>
        <locationY>2114</locationY>
        <connector>
            <targetReference>GetOwnerName</targetReference>
        </connector>
        <inputAssignments>
            <field>CommentBody</field>
            <value>
                <elementReference>varFinalInternalComment</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <field>IsPublished</field>
            <value>
                <booleanValue>false</booleanValue>
            </value>
        </inputAssignments>
        <inputAssignments>
            <field>ParentId</field>
            <value>
                <elementReference>recordId.Id</elementReference>
            </value>
        </inputAssignments>
        <object>CaseComment</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordCreates>
    <recordLookups>
        <name>Get_Cases_Bulk_Handover</name>
        <label>Get Cases Bulk Handover</label>
        <locationX>3306</locationX>
        <locationY>566</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>Select_Cases_to_Handover</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>OwnerId</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>recordId.Owner:User.Id</elementReference>
            </value>
        </filters>
        <filters>
            <field>IsClosed</field>
            <operator>EqualTo</operator>
            <value>
                <booleanValue>false</booleanValue>
            </value>
        </filters>
        <filters>
            <field>Status</field>
            <operator>NotEqualTo</operator>
            <value>
                <stringValue>New</stringValue>
            </value>
        </filters>
        <getFirstRecordOnly>false</getFirstRecordOnly>
        <object>Case</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordLookups>
        <name>Get_Custom_Notification_Type</name>
        <label>Get Custom Notification Type</label>
        <locationX>3306</locationX>
        <locationY>2954</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>Notification_Type_Found</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>DeveloperName</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>customNotifType</elementReference>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>CustomNotificationType</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordLookups>
        <name>GetOwnerName</name>
        <label>Get Owner Name</label>
        <locationX>2673</locationX>
        <locationY>3638</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>UpdatedCase</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>Id</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>recordId.OwnerId</elementReference>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>User</object>
        <queriedFields>Id</queriedFields>
        <queriedFields>Name</queriedFields>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordUpdates>
        <name>Update_Cases</name>
        <label>Update Cases</label>
        <locationX>3306</locationX>
        <locationY>2630</locationY>
        <connector>
            <targetReference>Create_Case_Comments</targetReference>
        </connector>
        <faultConnector>
            <isGoTo>true</isGoTo>
            <targetReference>SetErrorMessageDML</targetReference>
        </faultConnector>
        <inputReference>Cases</inputReference>
    </recordUpdates>
    <recordUpdates>
        <description>Updates the case picklist values which the User has changed for the &apos;Type&apos;, &apos;Sub-Type&apos; and &apos;Topic&apos; fileds</description>
        <name>UpdateCurrentCase</name>
        <label>Update Current Case</label>
        <locationX>512</locationX>
        <locationY>2006</locationY>
        <connector>
            <targetReference>CreateCaseComment</targetReference>
        </connector>
        <faultConnector>
            <targetReference>SetErrorMessageDML</targetReference>
        </faultConnector>
        <inputReference>recordId</inputReference>
    </recordUpdates>
    <runInMode>SystemModeWithoutSharing</runInMode>
    <screens>
        <description>Error screen</description>
        <name>ExceptionScreen</name>
        <label>Exception Occured</label>
        <locationX>1370</locationX>
        <locationY>2222</locationY>
        <allowBack>false</allowBack>
        <allowFinish>true</allowFinish>
        <allowPause>true</allowPause>
        <fields>
            <name>ExceptionText</name>
            <fieldText>&lt;p&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;{!$Flow.FaultMessage}&lt;/span&gt;&lt;/p&gt;</fieldText>
            <fieldType>DisplayText</fieldType>
        </fields>
        <showFooter>true</showFooter>
        <showHeader>true</showHeader>
    </screens>
    <screens>
        <name>FlipRecordTypeScreen</name>
        <label>Flip RecordType Screen</label>
        <locationX>380</locationX>
        <locationY>890</locationY>
        <allowBack>true</allowBack>
        <allowFinish>true</allowFinish>
        <allowPause>true</allowPause>
        <connector>
            <targetReference>AssignRecordType</targetReference>
        </connector>
        <fields>
            <name>FlipRecordTypeDescription</name>
            <fieldText>&lt;p&gt;These taxonomy values don&apos;t belong to this Case Record Type, would you like to change the Record Type of this Case? &lt;/p&gt;&lt;p&gt;More information on different Record Types can be found on &lt;a href=&quot;https://hub.is.adyen.com/tools/support/salesforce-service-cloud/faq/&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Hub&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;Current RecordType: {!recordId.RecordType.Name}&lt;/p&gt;&lt;p&gt;Proposed RecordType: {!GetNewTeam.RecordType.Name}&lt;/p&gt;</fieldText>
            <fieldType>DisplayText</fieldType>
        </fields>
        <fields>
            <name>FlipRecordTypeChoice</name>
            <choiceReferences>CurrentRecordTypeChoice</choiceReferences>
            <choiceReferences>ProposedRecordTypeChoice</choiceReferences>
            <dataType>String</dataType>
            <defaultSelectedChoiceReference>CurrentRecordTypeChoice</defaultSelectedChoiceReference>
            <fieldText>RecordType</fieldText>
            <fieldType>RadioButtons</fieldType>
            <isRequired>false</isRequired>
        </fields>
        <showFooter>true</showFooter>
        <showHeader>true</showHeader>
    </screens>
    <screens>
        <description>If no queue is found, show an error message</description>
        <name>No_Queue_Retuned_Screen</name>
        <label>No Queue Retuned Screen</label>
        <locationX>3086</locationX>
        <locationY>1322</locationY>
        <allowBack>true</allowBack>
        <allowFinish>true</allowFinish>
        <allowPause>true</allowPause>
        <fields>
            <name>NoQueueEmptyState_2</name>
            <extensionName>c:reusableEmptyState</extensionName>
            <fieldType>ComponentInstance</fieldType>
            <inputParameters>
                <name>heading</name>
                <value>
                    <stringValue>Something went wrong.</stringValue>
                </value>
            </inputParameters>
            <inputParameters>
                <name>messageBody</name>
                <value>
                    <stringValue>No valid queue could be determined by the system. Please contact a system administrator to resolve this issue.</stringValue>
                </value>
            </inputParameters>
            <inputParameters>
                <name>imageName</name>
                <value>
                    <stringValue>mis:no_preview</stringValue>
                </value>
            </inputParameters>
            <inputsOnNextNavToAssocScrn>UseStoredValues</inputsOnNextNavToAssocScrn>
            <isRequired>true</isRequired>
            <storeOutputAutomatically>true</storeOutputAutomatically>
        </fields>
        <showFooter>true</showFooter>
        <showHeader>true</showHeader>
    </screens>
    <screens>
        <name>NoAccessScreen</name>
        <label>No Access Screen</label>
        <locationX>4670</locationX>
        <locationY>242</locationY>
        <allowBack>true</allowBack>
        <allowFinish>true</allowFinish>
        <allowPause>true</allowPause>
        <fields>
            <name>NoAccessState</name>
            <extensionName>c:reusableEmptyState</extensionName>
            <fieldType>ComponentInstance</fieldType>
            <inputParameters>
                <name>imageName</name>
                <value>
                    <stringValue>misc:no_access2</stringValue>
                </value>
            </inputParameters>
            <inputParameters>
                <name>heading</name>
                <value>
                    <elementReference>$Label.NoAccess</elementReference>
                </value>
            </inputParameters>
            <inputParameters>
                <name>messageBody</name>
                <value>
                    <elementReference>$Label.NoAccessToFlowDescription</elementReference>
                </value>
            </inputParameters>
            <inputsOnNextNavToAssocScrn>UseStoredValues</inputsOnNextNavToAssocScrn>
            <isRequired>true</isRequired>
            <storeOutputAutomatically>true</storeOutputAutomatically>
        </fields>
        <showFooter>true</showFooter>
        <showHeader>true</showHeader>
    </screens>
    <screens>
        <description>If no queue is found, show an error message</description>
        <name>NoQueueRetunedScreen</name>
        <label>No Queue Retuned Screen</label>
        <locationX>1106</locationX>
        <locationY>1622</locationY>
        <allowBack>true</allowBack>
        <allowFinish>true</allowFinish>
        <allowPause>true</allowPause>
        <fields>
            <name>NoQueueEmptyState</name>
            <extensionName>c:reusableEmptyState</extensionName>
            <fieldType>ComponentInstance</fieldType>
            <inputParameters>
                <name>heading</name>
                <value>
                    <stringValue>Something went wrong.</stringValue>
                </value>
            </inputParameters>
            <inputParameters>
                <name>messageBody</name>
                <value>
                    <stringValue>No valid queue could be determined by the system. Please contact a system administrator to resolve this issue.</stringValue>
                </value>
            </inputParameters>
            <inputParameters>
                <name>imageName</name>
                <value>
                    <stringValue>mis:no_preview</stringValue>
                </value>
            </inputParameters>
            <inputsOnNextNavToAssocScrn>UseStoredValues</inputsOnNextNavToAssocScrn>
            <isRequired>true</isRequired>
            <storeOutputAutomatically>true</storeOutputAutomatically>
        </fields>
        <showFooter>true</showFooter>
        <showHeader>true</showHeader>
    </screens>
    <screens>
        <name>ScreenSelectReason</name>
        <label>Select Reason</label>
        <locationX>2673</locationX>
        <locationY>242</locationY>
        <allowBack>true</allowBack>
        <allowFinish>true</allowFinish>
        <allowPause>true</allowPause>
        <connector>
            <targetReference>ClearError</targetReference>
        </connector>
        <fields>
            <name>HandoverErrorMessage</name>
            <fieldText>&lt;p&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;{!ErrorMessage}&lt;/span&gt;&lt;/p&gt;</fieldText>
            <fieldType>DisplayText</fieldType>
        </fields>
        <fields>
            <fieldType>ObjectProvided</fieldType>
            <isRequired>false</isRequired>
            <objectFieldReference>recordId.HandoverReason__c</objectFieldReference>
        </fields>
        <fields>
            <name>ErrorNewStatusDisplay</name>
            <fieldText>&lt;p&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;When the Case status is &apos;New&apos; you can only reroute the case when handover reason is &apos;Case Wrongly Assigned Or Routed&apos;.&lt;/span&gt;&lt;/p&gt;</fieldText>
            <fieldType>DisplayText</fieldType>
            <visibilityRule>
                <conditionLogic>and</conditionLogic>
                <conditions>
                    <leftValueReference>recordId.Status</leftValueReference>
                    <operator>EqualTo</operator>
                    <rightValue>
                        <stringValue>New</stringValue>
                    </rightValue>
                </conditions>
                <conditions>
                    <leftValueReference>recordId.HandoverReason__c</leftValueReference>
                    <operator>IsNull</operator>
                    <rightValue>
                        <booleanValue>false</booleanValue>
                    </rightValue>
                </conditions>
                <conditions>
                    <leftValueReference>recordId.HandoverReason__c</leftValueReference>
                    <operator>NotEqualTo</operator>
                    <rightValue>
                        <stringValue>Case Wrongly Assigned Or Routed</stringValue>
                    </rightValue>
                </conditions>
            </visibilityRule>
        </fields>
        <fields>
            <name>escalatedReasonHandover</name>
            <fieldText>&lt;p&gt;&lt;span style=&quot;color: rgb(255, 0, 0);&quot;&gt;You can not use &apos;Escalated&apos; reason on non-escalated case. You have to start the Escalation process first.&lt;span class=&quot;ql-cursor&quot;&gt;﻿&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;</fieldText>
            <fieldType>DisplayText</fieldType>
            <visibilityRule>
                <conditionLogic>and</conditionLogic>
                <conditions>
                    <leftValueReference>recordId.HandoverReason__c</leftValueReference>
                    <operator>EqualTo</operator>
                    <rightValue>
                        <stringValue>Escalated</stringValue>
                    </rightValue>
                </conditions>
                <conditions>
                    <leftValueReference>recordId.IsEscalated</leftValueReference>
                    <operator>EqualTo</operator>
                    <rightValue>
                        <booleanValue>false</booleanValue>
                    </rightValue>
                </conditions>
            </visibilityRule>
        </fields>
        <fields>
            <name>ReassignInfoText</name>
            <fieldText>&lt;p&gt;Please review the following information. The case will be rerouted based on the values entered here.&lt;/p&gt;</fieldText>
            <fieldType>DisplayText</fieldType>
            <visibilityRule>
                <conditionLogic>or</conditionLogic>
                <conditions>
                    <leftValueReference>recordId.HandoverReason__c</leftValueReference>
                    <operator>EqualTo</operator>
                    <rightValue>
                        <stringValue>Case Wrongly Assigned Or Routed</stringValue>
                    </rightValue>
                </conditions>
                <conditions>
                    <leftValueReference>recordId.HandoverReason__c</leftValueReference>
                    <operator>EqualTo</operator>
                    <rightValue>
                        <stringValue>Hypercare</stringValue>
                    </rightValue>
                </conditions>
            </visibilityRule>
        </fields>
        <fields>
            <name>PopulateHandoverInformationInfoScreen</name>
            <fieldText>&lt;p&gt;Please select the new case owner and review the following information.&lt;/p&gt;</fieldText>
            <fieldType>DisplayText</fieldType>
            <visibilityRule>
                <conditionLogic>and</conditionLogic>
                <conditions>
                    <leftValueReference>recordId.HandoverReason__c</leftValueReference>
                    <operator>NotEqualTo</operator>
                    <rightValue>
                        <stringValue>Case Wrongly Assigned Or Routed</stringValue>
                    </rightValue>
                </conditions>
                <conditions>
                    <leftValueReference>recordId.HandoverReason__c</leftValueReference>
                    <operator>IsNull</operator>
                    <rightValue>
                        <booleanValue>false</booleanValue>
                    </rightValue>
                </conditions>
                <conditions>
                    <leftValueReference>recordId.Status</leftValueReference>
                    <operator>NotEqualTo</operator>
                    <rightValue>
                        <stringValue>New</stringValue>
                    </rightValue>
                </conditions>
                <conditions>
                    <leftValueReference>recordId.HandoverReason__c</leftValueReference>
                    <operator>NotEqualTo</operator>
                    <rightValue>
                        <stringValue>Hypercare</stringValue>
                    </rightValue>
                </conditions>
            </visibilityRule>
        </fields>
        <fields>
            <name>ScreenSelectReason_Section1</name>
            <fieldType>RegionContainer</fieldType>
            <fields>
                <name>ScreenSelectReason_Section1_Column1</name>
                <fieldType>Region</fieldType>
                <fields>
                    <fieldType>ObjectProvided</fieldType>
                    <isRequired>false</isRequired>
                    <objectFieldReference>recordId.Type</objectFieldReference>
                </fields>
                <fields>
                    <fieldType>ObjectProvided</fieldType>
                    <isRequired>false</isRequired>
                    <objectFieldReference>recordId.SubType__c</objectFieldReference>
                </fields>
                <fields>
                    <fieldType>ObjectProvided</fieldType>
                    <isRequired>false</isRequired>
                    <objectFieldReference>recordId.ServiceTopic__c</objectFieldReference>
                </fields>
                <inputParameters>
                    <name>width</name>
                    <value>
                        <stringValue>12</stringValue>
                    </value>
                </inputParameters>
                <isRequired>false</isRequired>
            </fields>
            <isRequired>false</isRequired>
            <regionContainerType>SectionWithoutHeader</regionContainerType>
            <visibilityRule>
                <conditionLogic>(1 OR 2) AND 3</conditionLogic>
                <conditions>
                    <leftValueReference>recordId.HandoverReason__c</leftValueReference>
                    <operator>EqualTo</operator>
                    <rightValue>
                        <stringValue>Case Wrongly Assigned Or Routed</stringValue>
                    </rightValue>
                </conditions>
                <conditions>
                    <leftValueReference>recordId.HandoverReason__c</leftValueReference>
                    <operator>EqualTo</operator>
                    <rightValue>
                        <stringValue>Hypercare</stringValue>
                    </rightValue>
                </conditions>
                <conditions>
                    <leftValueReference>inputOverrideTaxonomy</leftValueReference>
                    <operator>EqualTo</operator>
                    <rightValue>
                        <booleanValue>false</booleanValue>
                    </rightValue>
                </conditions>
            </visibilityRule>
        </fields>
        <fields>
            <name>ScreenSelectReason_Section2</name>
            <fieldType>RegionContainer</fieldType>
            <fields>
                <name>ScreenSelectReason_Section2_Column1</name>
                <fieldType>Region</fieldType>
                <fields>
                    <name>NewOwnerIsTeam</name>
                    <dataType>Boolean</dataType>
                    <defaultValue>
                        <booleanValue>true</booleanValue>
                    </defaultValue>
                    <fieldText>New Owner is a Team</fieldText>
                    <fieldType>InputField</fieldType>
                    <isRequired>true</isRequired>
                </fields>
                <fields>
                    <name>bulkHandoverCases</name>
                    <dataType>Boolean</dataType>
                    <defaultValue>
                        <booleanValue>false</booleanValue>
                    </defaultValue>
                    <fieldText>Bulk Handover Cases</fieldText>
                    <fieldType>InputField</fieldType>
                    <isRequired>true</isRequired>
                    <visibilityRule>
                        <conditionLogic>and</conditionLogic>
                        <conditions>
                            <leftValueReference>bulkBulkHandoverPermission</leftValueReference>
                            <operator>EqualTo</operator>
                            <rightValue>
                                <booleanValue>true</booleanValue>
                            </rightValue>
                        </conditions>
                        <conditions>
                            <leftValueReference>recordId.HandoverReason__c</leftValueReference>
                            <operator>IsNull</operator>
                            <rightValue>
                                <booleanValue>false</booleanValue>
                            </rightValue>
                        </conditions>
                        <conditions>
                            <leftValueReference>recordId.HandoverReason__c</leftValueReference>
                            <operator>EqualTo</operator>
                            <rightValue>
                                <stringValue>Agent Is Out Of Office</stringValue>
                            </rightValue>
                        </conditions>
                        <conditions>
                            <leftValueReference>CaseOwnerIsUser</leftValueReference>
                            <operator>EqualTo</operator>
                            <rightValue>
                                <booleanValue>true</booleanValue>
                            </rightValue>
                        </conditions>
                    </visibilityRule>
                </fields>
                <fields>
                    <name>NewOwnerUser</name>
                    <extensionName>c:quickLookup</extensionName>
                    <fieldType>ComponentInstance</fieldType>
                    <inputParameters>
                        <name>objectName</name>
                        <value>
                            <stringValue>User</stringValue>
                        </value>
                    </inputParameters>
                    <inputParameters>
                        <name>required</name>
                        <value>
                            <booleanValue>true</booleanValue>
                        </value>
                    </inputParameters>
                    <inputParameters>
                        <name>whereClause</name>
                        <value>
                            <stringValue>ContactId = null AND IsActive = TRUE</stringValue>
                        </value>
                    </inputParameters>
                    <inputParameters>
                        <name>label</name>
                        <value>
                            <stringValue>New Owner</stringValue>
                        </value>
                    </inputParameters>
                    <inputParameters>
                        <name>svg</name>
                        <value>
                            <stringValue>standard:user</stringValue>
                        </value>
                    </inputParameters>
                    <inputsOnNextNavToAssocScrn>ResetValues</inputsOnNextNavToAssocScrn>
                    <isRequired>true</isRequired>
                    <storeOutputAutomatically>true</storeOutputAutomatically>
                    <visibilityRule>
                        <conditionLogic>and</conditionLogic>
                        <conditions>
                            <leftValueReference>NewOwnerIsTeam</leftValueReference>
                            <operator>EqualTo</operator>
                            <rightValue>
                                <booleanValue>false</booleanValue>
                            </rightValue>
                        </conditions>
                    </visibilityRule>
                </fields>
                <fields>
                    <name>NewOwnerChoice</name>
                    <choiceReferences>ServiceTeamRecordChoiceSet</choiceReferences>
                    <extensionName>flowruntime:choiceLookup</extensionName>
                    <fieldText>New Owner</fieldText>
                    <fieldType>ComponentChoice</fieldType>
                    <isRequired>true</isRequired>
                    <storeOutputAutomatically>true</storeOutputAutomatically>
                    <visibilityRule>
                        <conditionLogic>and</conditionLogic>
                        <conditions>
                            <leftValueReference>NewOwnerIsTeam</leftValueReference>
                            <operator>EqualTo</operator>
                            <rightValue>
                                <booleanValue>true</booleanValue>
                            </rightValue>
                        </conditions>
                    </visibilityRule>
                </fields>
                <fields>
                    <name>InputInternalComment</name>
                    <fieldText>Internal Comment</fieldText>
                    <fieldType>LargeTextArea</fieldType>
                    <helpText>&lt;p&gt;Give a clear explanation why you wrote this comment, this comment is for internal use only.&lt;/p&gt;</helpText>
                    <isRequired>true</isRequired>
                </fields>
                <inputParameters>
                    <name>width</name>
                    <value>
                        <stringValue>6</stringValue>
                    </value>
                </inputParameters>
                <isRequired>false</isRequired>
            </fields>
            <fields>
                <name>ScreenSelectReason_Section2_Column2</name>
                <fieldType>Region</fieldType>
                <fields>
                    <name>NotifyTheNewOwner</name>
                    <dataType>Boolean</dataType>
                    <defaultValue>
                        <booleanValue>true</booleanValue>
                    </defaultValue>
                    <fieldText>Notify The New Owner</fieldText>
                    <fieldType>InputField</fieldType>
                    <helpText>&lt;p&gt;The new owner of the case will receive a bell notification to inform them that the case is handed over to them. In the event of a Bulk handover the new User will always be notified.&lt;/p&gt;</helpText>
                    <isRequired>true</isRequired>
                    <visibilityRule>
                        <conditionLogic>and</conditionLogic>
                        <conditions>
                            <leftValueReference>NewOwnerIsTeam</leftValueReference>
                            <operator>EqualTo</operator>
                            <rightValue>
                                <booleanValue>false</booleanValue>
                            </rightValue>
                        </conditions>
                    </visibilityRule>
                </fields>
                <fields>
                    <name>EmptyDisplay</name>
                    <fieldText>&lt;p&gt; &lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;</fieldText>
                    <fieldType>DisplayText</fieldType>
                    <visibilityRule>
                        <conditionLogic>and</conditionLogic>
                        <conditions>
                            <leftValueReference>NewOwnerIsTeam</leftValueReference>
                            <operator>EqualTo</operator>
                            <rightValue>
                                <booleanValue>true</booleanValue>
                            </rightValue>
                        </conditions>
                    </visibilityRule>
                </fields>
                <fields>
                    <fieldType>ObjectProvided</fieldType>
                    <isRequired>false</isRequired>
                    <objectFieldReference>recordId.CreatedById</objectFieldReference>
                </fields>
                <fields>
                    <fieldType>ObjectProvided</fieldType>
                    <isRequired>false</isRequired>
                    <objectFieldReference>recordId.Type</objectFieldReference>
                </fields>
                <fields>
                    <fieldType>ObjectProvided</fieldType>
                    <isRequired>false</isRequired>
                    <objectFieldReference>recordId.SubType__c</objectFieldReference>
                </fields>
                <fields>
                    <fieldType>ObjectProvided</fieldType>
                    <isRequired>false</isRequired>
                    <objectFieldReference>recordId.ServiceTopic__c</objectFieldReference>
                </fields>
                <fields>
                    <name>TaxonomyHelpText</name>
                    <fieldText>&lt;p&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255); color: rgb(68, 68, 68);&quot;&gt;In the event of a Bulk handover the Taxonomy will not be bulk updated.&lt;/span&gt;&lt;/p&gt;</fieldText>
                    <fieldType>DisplayText</fieldType>
                    <visibilityRule>
                        <conditionLogic>and</conditionLogic>
                        <conditions>
                            <leftValueReference>bulkHandoverCases</leftValueReference>
                            <operator>EqualTo</operator>
                            <rightValue>
                                <booleanValue>true</booleanValue>
                            </rightValue>
                        </conditions>
                    </visibilityRule>
                </fields>
                <inputParameters>
                    <name>width</name>
                    <value>
                        <stringValue>6</stringValue>
                    </value>
                </inputParameters>
                <isRequired>false</isRequired>
            </fields>
            <isRequired>false</isRequired>
            <regionContainerType>SectionWithoutHeader</regionContainerType>
            <visibilityRule>
                <conditionLogic>7  OR (1 AND 2 AND 3 AND 6) AND NOT (4 AND 5)</conditionLogic>
                <conditions>
                    <leftValueReference>recordId.HandoverReason__c</leftValueReference>
                    <operator>NotEqualTo</operator>
                    <rightValue>
                        <stringValue>Case Wrongly Assigned Or Routed</stringValue>
                    </rightValue>
                </conditions>
                <conditions>
                    <leftValueReference>recordId.HandoverReason__c</leftValueReference>
                    <operator>IsNull</operator>
                    <rightValue>
                        <booleanValue>false</booleanValue>
                    </rightValue>
                </conditions>
                <conditions>
                    <leftValueReference>recordId.Status</leftValueReference>
                    <operator>NotEqualTo</operator>
                    <rightValue>
                        <stringValue>New</stringValue>
                    </rightValue>
                </conditions>
                <conditions>
                    <leftValueReference>recordId.HandoverReason__c</leftValueReference>
                    <operator>EqualTo</operator>
                    <rightValue>
                        <stringValue>Escalated</stringValue>
                    </rightValue>
                </conditions>
                <conditions>
                    <leftValueReference>recordId.IsEscalated</leftValueReference>
                    <operator>EqualTo</operator>
                    <rightValue>
                        <booleanValue>false</booleanValue>
                    </rightValue>
                </conditions>
                <conditions>
                    <leftValueReference>recordId.HandoverReason__c</leftValueReference>
                    <operator>NotEqualTo</operator>
                    <rightValue>
                        <stringValue>Hypercare</stringValue>
                    </rightValue>
                </conditions>
                <conditions>
                    <leftValueReference>inputOverrideTaxonomy</leftValueReference>
                    <operator>EqualTo</operator>
                    <rightValue>
                        <booleanValue>true</booleanValue>
                    </rightValue>
                </conditions>
            </visibilityRule>
        </fields>
        <fields>
            <name>inputOverrideTaxonomy</name>
            <dataType>Boolean</dataType>
            <defaultValue>
                <booleanValue>false</booleanValue>
            </defaultValue>
            <fieldText>I can&apos;t complete the taxonomy, but I do know what team should handle the case.</fieldText>
            <fieldType>InputField</fieldType>
            <isRequired>true</isRequired>
            <visibilityRule>
                <conditionLogic>or</conditionLogic>
                <conditions>
                    <leftValueReference>recordId.HandoverReason__c</leftValueReference>
                    <operator>EqualTo</operator>
                    <rightValue>
                        <stringValue>Hypercare</stringValue>
                    </rightValue>
                </conditions>
                <conditions>
                    <leftValueReference>recordId.HandoverReason__c</leftValueReference>
                    <operator>EqualTo</operator>
                    <rightValue>
                        <stringValue>Case Wrongly Assigned Or Routed</stringValue>
                    </rightValue>
                </conditions>
            </visibilityRule>
        </fields>
        <showFooter>true</showFooter>
        <showHeader>true</showHeader>
    </screens>
    <screens>
        <name>Select_Cases_to_Handover</name>
        <label>Select Cases to Handover</label>
        <locationX>3306</locationX>
        <locationY>674</locationY>
        <allowBack>true</allowBack>
        <allowFinish>true</allowFinish>
        <allowPause>true</allowPause>
        <connector>
            <targetReference>Assign_Case_Count</targetReference>
        </connector>
        <fields>
            <name>CasesToBulkHandover</name>
            <dataTypeMappings>
                <typeName>T</typeName>
                <typeValue>Case</typeValue>
            </dataTypeMappings>
            <extensionName>flowruntime:datatable</extensionName>
            <fieldType>ComponentInstance</fieldType>
            <inputParameters>
                <name>label</name>
                <value>
                    <stringValue>Cases to Bulk Handover</stringValue>
                </value>
            </inputParameters>
            <inputParameters>
                <name>selectionMode</name>
                <value>
                    <stringValue>MULTI_SELECT</stringValue>
                </value>
            </inputParameters>
            <inputParameters>
                <name>minRowSelection</name>
                <value>
                    <numberValue>1.0</numberValue>
                </value>
            </inputParameters>
            <inputParameters>
                <name>isShowSearchBar</name>
                <value>
                    <booleanValue>true</booleanValue>
                </value>
            </inputParameters>
            <inputParameters>
                <name>shouldDisplayLabel</name>
                <value>
                    <booleanValue>true</booleanValue>
                </value>
            </inputParameters>
            <inputParameters>
                <name>tableData</name>
                <value>
                    <elementReference>Get_Cases_Bulk_Handover</elementReference>
                </value>
            </inputParameters>
            <inputParameters>
                <name>maxRowSelection</name>
                <value>
                    <numberValue>20.0</numberValue>
                </value>
            </inputParameters>
            <inputParameters>
                <name>columns</name>
                <value>
                    <stringValue>[{&quot;apiName&quot;:&quot;CaseNumber&quot;,&quot;guid&quot;:&quot;column-7051&quot;,&quot;editable&quot;:false,&quot;hasCustomHeaderLabel&quot;:true,&quot;customHeaderLabel&quot;:&quot;Case Number&quot;,&quot;wrapText&quot;:false,&quot;order&quot;:0,&quot;label&quot;:&quot;Case Number&quot;,&quot;type&quot;:&quot;text&quot;},{&quot;apiName&quot;:&quot;Status&quot;,&quot;guid&quot;:&quot;column-01f5&quot;,&quot;editable&quot;:false,&quot;hasCustomHeaderLabel&quot;:false,&quot;customHeaderLabel&quot;:&quot;&quot;,&quot;wrapText&quot;:false,&quot;order&quot;:1,&quot;label&quot;:&quot;Status&quot;,&quot;type&quot;:&quot;text&quot;},{&quot;apiName&quot;:&quot;Subject&quot;,&quot;guid&quot;:&quot;column-a5c5&quot;,&quot;editable&quot;:false,&quot;hasCustomHeaderLabel&quot;:false,&quot;customHeaderLabel&quot;:&quot;&quot;,&quot;wrapText&quot;:false,&quot;order&quot;:2,&quot;label&quot;:&quot;Subject&quot;,&quot;type&quot;:&quot;text&quot;},{&quot;apiName&quot;:&quot;Description&quot;,&quot;guid&quot;:&quot;column-5ec1&quot;,&quot;editable&quot;:false,&quot;hasCustomHeaderLabel&quot;:false,&quot;customHeaderLabel&quot;:&quot;&quot;,&quot;wrapText&quot;:false,&quot;order&quot;:3,&quot;label&quot;:&quot;Description&quot;,&quot;type&quot;:&quot;text&quot;}]</stringValue>
                </value>
            </inputParameters>
            <inputsOnNextNavToAssocScrn>UseStoredValues</inputsOnNextNavToAssocScrn>
            <isRequired>true</isRequired>
            <storeOutputAutomatically>true</storeOutputAutomatically>
        </fields>
        <showFooter>true</showFooter>
        <showHeader>false</showHeader>
    </screens>
    <screens>
        <name>UpdatedCase</name>
        <label>Updated Case</label>
        <locationX>2673</locationX>
        <locationY>3746</locationY>
        <allowBack>true</allowBack>
        <allowFinish>true</allowFinish>
        <allowPause>false</allowPause>
        <connector>
            <targetReference>Single_or_Bulk</targetReference>
        </connector>
        <fields>
            <name>resultMessage</name>
            <fieldText>&lt;p&gt;&lt;span style=&quot;color: rgb(68, 68, 68); background-color: rgb(255, 255, 255);&quot;&gt;Press finish to hand the case over with the following values.&lt;/span&gt;&lt;/p&gt;</fieldText>
            <fieldType>DisplayText</fieldType>
        </fields>
        <fields>
            <name>outputResult</name>
            <fieldText>&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;strong style=&quot;color: rgb(51, 181, 84);&quot;&gt;Type&lt;/strong&gt;:          {!recordId.Type}&lt;/p&gt;&lt;p&gt;&lt;strong style=&quot;color: rgb(51, 181, 84);&quot;&gt;Sub-Type&lt;/strong&gt;: &lt;span style=&quot;color: rgb(68, 68, 68); background-color: rgb(255, 255, 255);&quot;&gt;{!recordId.SubType__c}&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;strong style=&quot;color: rgb(51, 181, 84);&quot;&gt;Topic&lt;/strong&gt;:         {!recordId.ServiceTopic__c}&lt;/p&gt;&lt;p&gt;&lt;strong style=&quot;color: rgb(51, 181, 84); background-color: rgb(255, 255, 255);&quot;&gt;Owner&lt;/strong&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255);&quot;&gt;:       &lt;/span&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255); color: rgb(68, 68, 68);&quot;&gt;{!NewCaseOwner}&lt;/span&gt;&lt;/p&gt;</fieldText>
            <fieldType>DisplayText</fieldType>
        </fields>
        <showFooter>true</showFooter>
        <showHeader>true</showHeader>
    </screens>
    <screens>
        <name>ZendeskCollaborationScreen</name>
        <label>Zendesk Collaboration Screen</label>
        <locationX>50</locationX>
        <locationY>1406</locationY>
        <allowBack>true</allowBack>
        <allowFinish>true</allowFinish>
        <allowPause>true</allowPause>
        <connector>
            <targetReference>UpdateCaseFieldsZendeskCollaboration</targetReference>
        </connector>
        <fields>
            <name>ZendeskCollabText</name>
            <fieldText>&lt;p&gt;You have selected a team that is not yet migrated to Salesforce.&lt;/p&gt;&lt;p&gt;A new Zendesk ticket will be created and this Salesforce case will stay open with you as the owner. You are responsible to update and complete this Salesforce case, while your colleague is responsible for the Zendesk ticket.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;Press Next to continue, or previous to select a different owner.&lt;/p&gt;</fieldText>
            <fieldType>DisplayText</fieldType>
        </fields>
        <showFooter>true</showFooter>
        <showHeader>true</showHeader>
    </screens>
    <screens>
        <name>ZendeskInvalidScreen</name>
        <label>Zendesk Invalid Screen</label>
        <locationX>578</locationX>
        <locationY>1406</locationY>
        <allowBack>true</allowBack>
        <allowFinish>true</allowFinish>
        <allowPause>true</allowPause>
        <fields>
            <name>Copy_1_of_Copy_1_of_ZendeskCollabText</name>
            <fieldText>&lt;p&gt;You have selected a team that is not yet migrated to Salesforce.&lt;/p&gt;&lt;p&gt;You cannot handover responsibility for this case using this handover reason, please select a different owner or choose a different handover reason. Until you do, you are responsible to update and complete this Salesforce case.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;Press Previous to go back.&lt;/p&gt;</fieldText>
            <fieldType>DisplayText</fieldType>
        </fields>
        <showFooter>true</showFooter>
        <showHeader>true</showHeader>
    </screens>
    <screens>
        <name>ZendeskTransferScreen</name>
        <label>Zendesk Transfer Screen</label>
        <locationX>314</locationX>
        <locationY>1406</locationY>
        <allowBack>true</allowBack>
        <allowFinish>true</allowFinish>
        <allowPause>true</allowPause>
        <connector>
            <targetReference>UpdateCaseZendeskTransfer</targetReference>
        </connector>
        <fields>
            <name>Copy_1_of_ZendeskCollabText</name>
            <fieldText>&lt;p&gt;You have selected a team that is not yet migrated to Salesforce.&lt;/p&gt;&lt;p&gt;A new Zendesk ticket will be created and this Salesforce case will be closed automatically. You do not have any further responsibilities to complete this Salesforce case, while your colleague is responsible for the Zendesk ticket.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;Press Next to continue, or Previous to go back.&lt;/p&gt;</fieldText>
            <fieldType>DisplayText</fieldType>
        </fields>
        <showFooter>true</showFooter>
        <showHeader>true</showHeader>
    </screens>
    <start>
        <locationX>3545</locationX>
        <locationY>0</locationY>
        <connector>
            <targetReference>Access</targetReference>
        </connector>
    </start>
    <status>Active</status>
    <subflows>
        <name>GetGroupFromTeam</name>
        <label>Get Group From Team</label>
        <locationX>974</locationX>
        <locationY>1406</locationY>
        <connector>
            <targetReference>ValidQueue</targetReference>
        </connector>
        <flowName>SubFlowGetCorrectGroupFromTeam</flowName>
        <inputAssignments>
            <name>ServiceTeam</name>
            <value>
                <elementReference>selectedTeamRecord</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <name>SubType</name>
            <value>
                <elementReference>recordId.SubType__c</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <name>Topic</name>
            <value>
                <elementReference>recordId.ServiceTopic__c</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <name>Type</name>
            <value>
                <elementReference>recordId.Type</elementReference>
            </value>
        </inputAssignments>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </subflows>
    <subflows>
        <name>GetGroupFromTeamBulk</name>
        <label>Get Group From Team Bulk</label>
        <locationX>2998</locationX>
        <locationY>998</locationY>
        <connector>
            <targetReference>AssignCaseCountBulk</targetReference>
        </connector>
        <flowName>SubFlowGetCorrectGroupFromTeam</flowName>
        <inputAssignments>
            <name>ServiceTeam</name>
            <value>
                <elementReference>selectedTeamRecord</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <name>SubType</name>
            <value>
                <elementReference>recordId.SubType__c</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <name>Topic</name>
            <value>
                <elementReference>recordId.ServiceTopic__c</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <name>Type</name>
            <value>
                <elementReference>recordId.Type</elementReference>
            </value>
        </inputAssignments>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </subflows>
    <subflows>
        <name>GetNewTeam</name>
        <label>Get New Team</label>
        <locationX>1073</locationX>
        <locationY>566</locationY>
        <connector>
            <targetReference>ValidNewOwner</targetReference>
        </connector>
        <flowName>GetComplexityAndTeamFromTaxonomy</flowName>
        <inputAssignments>
            <name>case</name>
            <value>
                <elementReference>recordId</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <name>SubType</name>
            <value>
                <elementReference>recordId.SubType__c</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <name>Topic</name>
            <value>
                <elementReference>recordId.ServiceTopic__c</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <name>Type</name>
            <value>
                <elementReference>recordId.Type</elementReference>
            </value>
        </inputAssignments>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </subflows>
    <textTemplates>
        <name>BulkNotificationBody</name>
        <isViewedAsPlainText>true</isViewedAsPlainText>
        <text>{!varFinalInternalComment}</text>
    </textTemplates>
    <textTemplates>
        <name>BulkNotificationTitle</name>
        <isViewedAsPlainText>true</isViewedAsPlainText>
        <text>Bulk Handover: {!varCaseCount} Cases.
Please check your Open Cases.</text>
    </textTemplates>
    <textTemplates>
        <name>HandoverToastMessage</name>
        <isViewedAsPlainText>true</isViewedAsPlainText>
        <text>The case {!recordId.CaseNumber} has been handed over.</text>
    </textTemplates>
    <textTemplates>
        <name>HandoverToastMessageBulk</name>
        <isViewedAsPlainText>true</isViewedAsPlainText>
        <text>{!varCaseCount} Case(s) have been handed over.</text>
    </textTemplates>
    <textTemplates>
        <description>Add Internal Comment Type</description>
        <name>InternalCommentWithType</name>
        <isViewedAsPlainText>false</isViewedAsPlainText>
        <text>Handover: {!InputInternalComment}</text>
    </textTemplates>
    <textTemplates>
        <name>ZendeskCollabEmailBody</name>
        <isViewedAsPlainText>false</isViewedAsPlainText>
        <text>&lt;p&gt;This Zendesk ticket was created from a Salesforce case by a colleague that is already working from Salesforce. The original Salesforce case is still open &amp;amp; will be completed by the colleague in Salesforce. You are now responsible to update and complete this Zendesk ticket.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Contextual case details:&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Requester Account: {!recordId.Account.Name}&lt;/p&gt;&lt;p&gt;Requester Email Address: {!recordId.SuppliedEmail}&lt;/p&gt;&lt;p&gt;Requester Name: {!recordId.ContactName__c}&lt;/p&gt;&lt;p&gt;Salesforce Case Number: {!recordId.CaseNumber}&lt;/p&gt;&lt;p&gt;Previous Agent: {!CaseOwnerFormula}, {!CaseOwnerEmailFormula}&lt;/p&gt;&lt;p&gt;Original Ticket Description: {!recordId.Description}&lt;/p&gt;&lt;p&gt;Internal Comment: {!InputInternalComment}&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255); color: rgb(68, 68, 68);&quot;&gt;Zendesk Ticket URL: {{ticket.url}}&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255); color: rgb(68, 68, 68);&quot;&gt;Additional CCs: {{ticket.ccs}}&lt;/span&gt;&lt;/p&gt;&lt;p&gt;Last Public Comment: {{ticket.latest_public_comment_html}}&lt;/p&gt;</text>
    </textTemplates>
    <textTemplates>
        <name>ZendeskCollabEmailSubject</name>
        <isViewedAsPlainText>true</isViewedAsPlainText>
        <text>[Collaboration Action] {!recordId.Subject}</text>
    </textTemplates>
    <textTemplates>
        <name>ZendeskCollaborationInternalComment</name>
        <isViewedAsPlainText>true</isViewedAsPlainText>
        <text>This case has been sent to Zendesk as part of a collaboration.
Team: {!selectedTeamRecord.Label}
Zendesk Email Address: {!selectedTeamRecord.ZendeskEmail__c}</text>
    </textTemplates>
    <textTemplates>
        <name>ZendeskTransferEmailBody</name>
        <isViewedAsPlainText>false</isViewedAsPlainText>
        <text>&lt;p&gt;This Zendesk ticket was created from a Salesforce case by a colleague that is already working from Salesforce. The original Salesforce case has been closed &amp;amp; you are now responsible to update and complete this Zendesk ticket.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Contextual case details:&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Requester Account: {!recordId.Account.Name}&lt;/p&gt;&lt;p&gt;Requester Email Address: {!recordId.SuppliedEmail}&lt;/p&gt;&lt;p&gt;Requester Name: {!recordId.ContactName__c}&lt;/p&gt;&lt;p&gt;Salesforce Case Number: {!recordId.CaseNumber}&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;background-color: var(--slds-g-color-neutral-base-100, var(--lwc-colorBackgroundInput,rgb(255, 255, 255))); color: var(--slds-g-color-neutral-base-30, var(--lwc-colorTextWeak,rgb(68, 68, 68))); font-size: var(--lwc-fontSize3,0.8125rem); font-family: var(--lwc-fontFamily,-apple-system, BlinkMacSystemFont, &apos;Segoe UI&apos;, Roboto, Helvetica, Arial, sans-serif, &apos;Apple Color Emoji&apos;, &apos;Segoe UI Emoji&apos;, &apos;Segoe UI Symbol&apos;);&quot;&gt;Previous Agent: {!CaseOwnerFormula}, {!CaseOwnerEmailFormula}&lt;/span&gt;&lt;/p&gt;&lt;p&gt;Original Ticket Description: {!recordId.Description}&lt;/p&gt;&lt;p&gt;Internal Comment: {!InputInternalComment}&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255); color: rgb(68, 68, 68);&quot;&gt;Additional CCs: {{ticket.ccs}}&lt;/span&gt;&lt;/p&gt;&lt;p&gt;Zendesk Ticket URL: {{ticket.url}}&lt;/p&gt;&lt;p&gt;Last Public Comment: {{ticket.latest_public_comment_html}}&lt;/p&gt;</text>
    </textTemplates>
    <textTemplates>
        <name>ZendeskTransferEmailSubject</name>
        <isViewedAsPlainText>true</isViewedAsPlainText>
        <text>[Transfer Action] {!recordId.Subject}</text>
    </textTemplates>
    <textTemplates>
        <description>Internal comment to be posted on the case when the case is transferred to Zendesk</description>
        <name>ZendeskTransferInternalComment</name>
        <isViewedAsPlainText>true</isViewedAsPlainText>
        <text>This case has been transferred to Zendesk.
Team: {!selectedTeamRecord.Label}
Email Address: {!selectedTeamRecord.ZendeskEmail__c}</text>
    </textTemplates>
    <variables>
        <name>CaseComment</name>
        <dataType>SObject</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
        <objectType>CaseComment</objectType>
    </variables>
    <variables>
        <name>CaseComments</name>
        <dataType>SObject</dataType>
        <isCollection>true</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
        <objectType>CaseComment</objectType>
    </variables>
    <variables>
        <name>Cases</name>
        <dataType>SObject</dataType>
        <isCollection>true</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
        <objectType>Case</objectType>
    </variables>
    <variables>
        <name>ErrorMessage</name>
        <dataType>String</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
    </variables>
    <variables>
        <description>Collection of groups</description>
        <name>GroupCollection</name>
        <dataType>SObject</dataType>
        <isCollection>true</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
        <objectType>Group</objectType>
    </variables>
    <variables>
        <name>NotificationRecipientIDs</name>
        <dataType>String</dataType>
        <isCollection>true</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
    </variables>
    <variables>
        <name>oldCaseOwner</name>
        <dataType>String</dataType>
        <isCollection>false</isCollection>
        <isInput>true</isInput>
        <isOutput>false</isOutput>
    </variables>
    <variables>
        <name>outputMember</name>
        <dataType>SObject</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>true</isOutput>
        <objectType>Case</objectType>
    </variables>
    <variables>
        <description>Record variable to hold the Case record that the Flow is launched from.</description>
        <name>recordId</name>
        <dataType>SObject</dataType>
        <isCollection>false</isCollection>
        <isInput>true</isInput>
        <isOutput>false</isOutput>
        <objectType>Case</objectType>
    </variables>
    <variables>
        <description>the record the user selected.</description>
        <name>selectedTeamRecord</name>
        <dataType>SObject</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
        <objectType>ServiceTeam__mdt</objectType>
    </variables>
    <variables>
        <name>tempGroup</name>
        <dataType>SObject</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
        <objectType>Group</objectType>
    </variables>
    <variables>
        <name>varCaseCount</name>
        <dataType>Number</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
        <scale>0</scale>
    </variables>
    <variables>
        <description>Final internal comment</description>
        <name>varFinalInternalComment</name>
        <dataType>String</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
    </variables>
</Flow>
