<?xml version="1.0" encoding="UTF-8"?>
<Flow xmlns="http://soap.sforce.com/2006/04/metadata">
    <apiVersion>59.0</apiVersion>
    <assignments>
        <name>AddToCollection</name>
        <label>Add To Collection</label>
        <locationX>974</locationX>
        <locationY>2651</locationY>
        <assignmentItems>
            <assignToReference>collContactsFilteredByDomainMatches</assignToReference>
            <operator>Add</operator>
            <value>
                <elementReference>FilterContactsBasedOnEmailDomain</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>LoopOverMatchedAccount</targetReference>
        </connector>
    </assignments>
    <assignments>
        <description>Set Account on Case based on the Email Domain</description>
        <name>AssignAccountBasedOnDomain</name>
        <label>Assign Account Based On Domain</label>
        <locationX>534</locationX>
        <locationY>2435</locationY>
        <assignmentItems>
            <assignToReference>$Record.AccountId</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>varDomainMatchedAccountId</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <isGoTo>true</isGoTo>
            <targetReference>FilterContactsBasedOnAccount</targetReference>
        </connector>
    </assignments>
    <assignments>
        <description>Assign it back to the original Collection</description>
        <name>AssignDomainFilteredCollection</name>
        <label>Assign Filtered Collection</label>
        <locationX>886</locationX>
        <locationY>2843</locationY>
        <assignmentItems>
            <assignToReference>GetContacts</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>collContactsFilteredByDomainMatches</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>AssignNumberOfMatches</targetReference>
        </connector>
    </assignments>
    <assignments>
        <name>AssignFilteredCollection</name>
        <label>Assign Filtered Collection</label>
        <locationX>50</locationX>
        <locationY>1835</locationY>
        <assignmentItems>
            <assignToReference>GetContacts</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>FilterContactsBasedOnAccount</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>AssignNumberOfMatches</targetReference>
        </connector>
    </assignments>
    <assignments>
        <name>AssignNumberOfMatches</name>
        <label>Assign Number Of Matches</label>
        <locationX>688</locationX>
        <locationY>3119</locationY>
        <assignmentItems>
            <assignToReference>NumberOfMatches</assignToReference>
            <operator>AssignCount</operator>
            <value>
                <elementReference>GetContacts</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>decNumberOfMatches</targetReference>
        </connector>
    </assignments>
    <assignments>
        <name>AssignPreliminaryNumberOfAccountMatches</name>
        <label>Assign Preliminary Number of Account Matches</label>
        <locationX>1414</locationX>
        <locationY>611</locationY>
        <assignmentItems>
            <assignToReference>varNumberOfAccountMatches</assignToReference>
            <operator>AssignCount</operator>
            <value>
                <elementReference>AccountMatches</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>AssessAccountMatches</targetReference>
        </connector>
    </assignments>
    <assignments>
        <name>AssignPreliminaryNumberOfMatches</name>
        <label>Assign Preliminary Number Of Matches</label>
        <locationX>688</locationX>
        <locationY>1511</locationY>
        <assignmentItems>
            <assignToReference>NumberOfMatches</assignToReference>
            <operator>AssignCount</operator>
            <value>
                <elementReference>GetContacts</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>decAccountPopulated</targetReference>
        </connector>
    </assignments>
    <assignments>
        <description>Make a note that multiple accounts have been found with the same domain.</description>
        <name>MarkMultipleAccountsFound</name>
        <label>Mark Multiple Accounts Found</label>
        <locationX>1106</locationX>
        <locationY>2051</locationY>
        <assignmentItems>
            <assignToReference>varDomainMatchedMultipleAccounts</assignToReference>
            <operator>Assign</operator>
            <value>
                <booleanValue>true</booleanValue>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>PotentialMatchedAccounts</assignToReference>
            <operator>Add</operator>
            <value>
                <elementReference>LoopOverDomainRecords.Account__c</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>LoopOverDomainRecords</targetReference>
        </connector>
    </assignments>
    <assignments>
        <name>Populate_Contact</name>
        <label>Populate Contact</label>
        <locationX>820</locationX>
        <locationY>3551</locationY>
        <assignmentItems>
            <assignToReference>$Record.ContactId</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>LoopGetFirstContact.Id</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>$Record.AccountId</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>$Record.Contact.AccountId</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>GetFirstContactCounter</assignToReference>
            <operator>Add</operator>
            <value>
                <numberValue>1.0</numberValue>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>LoopGetFirstContact</targetReference>
        </connector>
    </assignments>
    <assignments>
        <description>Populates the Recipient Email field with either the Contact Email or the Webmail.</description>
        <name>PopulateRecipientEmail</name>
        <label>Populate Recipient Email</label>
        <locationX>1106</locationX>
        <locationY>287</locationY>
        <assignmentItems>
            <assignToReference>$Record.RecipientEmailFlow__c</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>forRecipientEmail</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>decContactAccountPopulated</targetReference>
        </connector>
    </assignments>
    <assignments>
        <name>SetAccount_ID</name>
        <label>Set Account ID</label>
        <locationX>1174</locationX>
        <locationY>935</locationY>
        <assignmentItems>
            <assignToReference>$Record.AccountId</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>LoopOverMatchedAccounts.Id</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>LoopOverMatchedAccounts</targetReference>
        </connector>
    </assignments>
    <assignments>
        <name>SetAccountBasedOnContact</name>
        <label>Set Account Based on Contact</label>
        <locationX>470</locationX>
        <locationY>611</locationY>
        <assignmentItems>
            <assignToReference>$Record.AccountId</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>$Record.Contact.AccountId</elementReference>
            </value>
        </assignmentItems>
    </assignments>
    <assignments>
        <description>Set account ID in a temporarily variable.</description>
        <name>SetAccountId</name>
        <label>Set Account Id</label>
        <locationX>1370</locationX>
        <locationY>2051</locationY>
        <assignmentItems>
            <assignToReference>varDomainMatchedAccountId</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>LoopOverDomainRecords.Account__c</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>LoopOverDomainRecords</targetReference>
        </connector>
    </assignments>
    <collectionProcessors>
        <name>FilterContactsBasedOnAccount</name>
        <elementSubtype>FilterCollectionProcessor</elementSubtype>
        <label>Filter Contacts Based On Account</label>
        <locationX>50</locationX>
        <locationY>1727</locationY>
        <assignNextValueToReference>currentItem_FilterContactsBasedOnAccount</assignNextValueToReference>
        <collectionProcessorType>FilterCollectionProcessor</collectionProcessorType>
        <collectionReference>GetContacts</collectionReference>
        <conditionLogic>and</conditionLogic>
        <conditions>
            <leftValueReference>currentItem_FilterContactsBasedOnAccount.AccountId</leftValueReference>
            <operator>EqualTo</operator>
            <rightValue>
                <elementReference>$Record.AccountId</elementReference>
            </rightValue>
        </conditions>
        <connector>
            <targetReference>AssignFilteredCollection</targetReference>
        </connector>
    </collectionProcessors>
    <collectionProcessors>
        <name>FilterContactsBasedOnEmailDomain</name>
        <elementSubtype>FilterCollectionProcessor</elementSubtype>
        <label>Filter Contacts Based On Email Domain</label>
        <locationX>974</locationX>
        <locationY>2543</locationY>
        <assignNextValueToReference>currentItem_FilterContactsBasedOnEmailDomain</assignNextValueToReference>
        <collectionProcessorType>FilterCollectionProcessor</collectionProcessorType>
        <collectionReference>GetContacts</collectionReference>
        <conditionLogic>and</conditionLogic>
        <conditions>
            <leftValueReference>currentItem_FilterContactsBasedOnEmailDomain.AccountId</leftValueReference>
            <operator>EqualTo</operator>
            <rightValue>
                <elementReference>LoopOverMatchedAccount</elementReference>
            </rightValue>
        </conditions>
        <connector>
            <targetReference>AddToCollection</targetReference>
        </connector>
    </collectionProcessors>
    <decisions>
        <description>Is the account already in the processed Collection</description>
        <name>AccountAlreadyProcessed</name>
        <label>Account Already Processed?</label>
        <locationX>1150</locationX>
        <locationY>1943</locationY>
        <defaultConnector>
            <targetReference>SetAccountId</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>No</defaultConnectorLabel>
        <rules>
            <name>outYesAlreadyProcessed</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>varDomainMatchedAccountId</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <elementReference>LoopOverDomainRecords.Account__c</elementReference>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>LoopOverDomainRecords</targetReference>
            </connector>
            <label>Yes</label>
        </rules>
        <rules>
            <name>NoMultipleAccounts</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>varDomainMatchedAccountId</leftValueReference>
                <operator>NotEqualTo</operator>
                <rightValue>
                    <elementReference>LoopOverDomainRecords.Account__c</elementReference>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>varDomainMatchedAccountId</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>MarkMultipleAccountsFound</targetReference>
            </connector>
            <label>No, Multiple Accounts</label>
        </rules>
    </decisions>
    <decisions>
        <name>AssessAccountMatches</name>
        <label>Assess Account Matches</label>
        <locationX>1414</locationX>
        <locationY>719</locationY>
        <defaultConnectorLabel>Default Outcome</defaultConnectorLabel>
        <rules>
            <name>OneMatch</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>varNumberOfAccountMatches</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <numberValue>1.0</numberValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>LoopOverMatchedAccounts</targetReference>
            </connector>
            <label>One Match</label>
        </rules>
        <rules>
            <name>MultipleMatches</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>varNumberOfAccountMatches</leftValueReference>
                <operator>GreaterThan</operator>
                <rightValue>
                    <numberValue>1.0</numberValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>SuppliedEmailPopulated</targetReference>
            </connector>
            <label>Multiple Matches</label>
        </rules>
        <rules>
            <name>NoMatch</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>AccountMatches</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>true</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <isGoTo>true</isGoTo>
                <targetReference>SuppliedEmailPopulated</targetReference>
            </connector>
            <label>No Match</label>
        </rules>
    </decisions>
    <decisions>
        <description>Account Populated: Filter the contacts based on the Account
If not populated:
Cannot Match Contact: If the returned Contacts is not equal to 1, find the account based on the Email Domain and try again.
Cannot Match: Match the contact to the Case.</description>
        <name>decAccountPopulated</name>
        <label>Account Populated</label>
        <locationX>688</locationX>
        <locationY>1619</locationY>
        <defaultConnector>
            <targetReference>AssignNumberOfMatches</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Contact Match</defaultConnectorLabel>
        <rules>
            <name>outAccountPopulated</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>$Record.AccountId</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>FilterContactsBasedOnAccount</targetReference>
            </connector>
            <label>Account Populated</label>
        </rules>
        <rules>
            <name>outAccountNotPopulatedNoContact_Match</name>
            <conditionLogic>or</conditionLogic>
            <conditions>
                <leftValueReference>NumberOfMatches</leftValueReference>
                <operator>NotEqualTo</operator>
                <rightValue>
                    <numberValue>1.0</numberValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>QueryEmailDomainRecords</targetReference>
            </connector>
            <label>Cannot Match Contact</label>
        </rules>
    </decisions>
    <decisions>
        <name>decContactAccount</name>
        <label>Check Contact Account</label>
        <locationX>602</locationX>
        <locationY>503</locationY>
        <defaultConnectorLabel>Default Outcome</defaultConnectorLabel>
        <rules>
            <name>Contact_Account_Populated</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>$Record.Contact.AccountId</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>SetAccountBasedOnContact</targetReference>
            </connector>
            <label>Contact Account Populated</label>
        </rules>
    </decisions>
    <decisions>
        <description>Checks if the account and contact are populated</description>
        <name>decContactAccountPopulated</name>
        <label>Account/Contact Populated</label>
        <locationX>1106</locationX>
        <locationY>395</locationY>
        <defaultConnector>
            <targetReference>SuppliedEmailPopulated</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Contact Not Populated</defaultConnectorLabel>
        <rules>
            <name>outContactAndAccount</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>$Record.ContactId</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>$Record.AccountId</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <label>Contact And Account</label>
        </rules>
        <rules>
            <name>outContactPopulated</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>$Record.ContactId</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>decContactAccount</targetReference>
            </connector>
            <label>Contact</label>
        </rules>
        <rules>
            <name>BOAccountKey</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>forBOAccountKeySubString</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>$Record.AccountId</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>true</booleanValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>$Record.ContactId</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>true</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>QueryMatchingAccounts</targetReference>
            </connector>
            <label>BO Account Key</label>
        </rules>
    </decisions>
    <decisions>
        <name>decGetFirstContactCounter</name>
        <label>Get First Contact Counter</label>
        <locationX>952</locationX>
        <locationY>3443</locationY>
        <defaultConnector>
            <targetReference>LoopGetFirstContact</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Default Outcome</defaultConnectorLabel>
        <rules>
            <name>outZeroGetFirstContactCounter</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>GetFirstContactCounter</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <numberValue>0.0</numberValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>Populate_Contact</targetReference>
            </connector>
            <label>Zero</label>
        </rules>
    </decisions>
    <decisions>
        <name>decNumberOfMatches</name>
        <label>Number of Matches</label>
        <locationX>688</locationX>
        <locationY>3227</locationY>
        <defaultConnectorLabel>Default Outcome</defaultConnectorLabel>
        <rules>
            <name>outNone</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>NumberOfMatches</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <numberValue>0.0</numberValue>
                </rightValue>
            </conditions>
            <label>None</label>
        </rules>
        <rules>
            <name>outOne</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>NumberOfMatches</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <numberValue>1.0</numberValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>LoopGetFirstContact</targetReference>
            </connector>
            <label>One</label>
        </rules>
        <rules>
            <name>outOnePlus</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>NumberOfMatches</leftValueReference>
                <operator>GreaterThan</operator>
                <rightValue>
                    <numberValue>1.0</numberValue>
                </rightValue>
            </conditions>
            <label>One+</label>
        </rules>
    </decisions>
    <decisions>
        <description>If exact one account matches the domain, set that account on the case</description>
        <name>NumberAccountMatches</name>
        <label>Number Account Matches?</label>
        <locationX>842</locationX>
        <locationY>2327</locationY>
        <defaultConnector>
            <targetReference>AssignNumberOfMatches</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>None</defaultConnectorLabel>
        <rules>
            <name>outOneAccountMatches</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>varDomainMatchedMultipleAccounts</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>varDomainMatchedAccountId</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>AssignAccountBasedOnDomain</targetReference>
            </connector>
            <label>One</label>
        </rules>
        <rules>
            <name>outMultipleDomainMatches</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>varDomainMatchedMultipleAccounts</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <booleanValue>true</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>LoopOverMatchedAccount</targetReference>
            </connector>
            <label>Multiple</label>
        </rules>
    </decisions>
    <decisions>
        <name>SuppliedEmailPopulated</name>
        <label>Supplied Email Populated</label>
        <locationX>1106</locationX>
        <locationY>1295</locationY>
        <defaultConnectorLabel>Default Outcome</defaultConnectorLabel>
        <rules>
            <name>outContactEmailPopulated</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>$Record.SuppliedEmail</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>GetContacts</targetReference>
            </connector>
            <label>Email Populated</label>
        </rules>
    </decisions>
    <description>Hotfix: Checks if the BO Key Formula is null instead of the BO Key itself. This should stop matching based on BO Key.
Enhanced Matching for API-Created Cases: Now using both BO Account Key and Web Email to accurately associate each case with the relevant Account and/or Contact.</description>
    <environments>Default</environments>
    <formulas>
        <description>Formula variable to extract the substring from the BO_AccountKey__c field.</description>
        <name>forBOAccountKeySubString</name>
        <dataType>String</dataType>
        <expression>SUBSTITUTE(
     {!$Record.BO_AccountKey__c},
    LEFT({!$Record.BO_AccountKey__c}, FIND(&quot;.&quot;, {!$Record.BO_AccountKey__c}) -0),
    &quot;&quot;
)</expression>
    </formulas>
    <formulas>
        <description>Populates the Recipient Email field with either the Contact Email or the Webmail.</description>
        <name>forRecipientEmail</name>
        <dataType>String</dataType>
        <expression>IF(NOT(ISBLANK( {!$Record.ContactEmail} )),
{!$Record.ContactEmail},
{!$Record.SuppliedEmail})</expression>
    </formulas>
    <formulas>
        <name>SuppliedEmailDomain</name>
        <dataType>String</dataType>
        <expression>SUBSTITUTE({!$Record.SuppliedEmail}, LEFT({!$Record.SuppliedEmail}, FIND(&quot;@&quot;, {!$Record.SuppliedEmail})), NULL)</expression>
    </formulas>
    <interviewLabel>Case Service Assign Contact And Account {!$Flow.CurrentDateTime}</interviewLabel>
    <label>Case Service Assign Contact And Account</label>
    <loops>
        <description>The query returns a collection, we need to get the first (and only) contact from the list.</description>
        <name>LoopGetFirstContact</name>
        <label>Loop Get First Contact</label>
        <locationX>732</locationX>
        <locationY>3335</locationY>
        <collectionReference>GetContacts</collectionReference>
        <iterationOrder>Asc</iterationOrder>
        <nextValueConnector>
            <targetReference>decGetFirstContactCounter</targetReference>
        </nextValueConnector>
    </loops>
    <loops>
        <description>Loop over domain records to check the Accounts</description>
        <name>LoopOverDomainRecords</name>
        <label>Loop over Domain Records</label>
        <locationX>842</locationX>
        <locationY>1835</locationY>
        <collectionReference>QueryEmailDomainRecords</collectionReference>
        <iterationOrder>Asc</iterationOrder>
        <nextValueConnector>
            <targetReference>AccountAlreadyProcessed</targetReference>
        </nextValueConnector>
        <noMoreValuesConnector>
            <targetReference>NumberAccountMatches</targetReference>
        </noMoreValuesConnector>
    </loops>
    <loops>
        <description>Loop over matched accounts to filter the contacts based on the matched Accounts</description>
        <name>LoopOverMatchedAccount</name>
        <label>Loop Over Matched Accounts</label>
        <locationX>886</locationX>
        <locationY>2435</locationY>
        <collectionReference>PotentialMatchedAccounts</collectionReference>
        <iterationOrder>Asc</iterationOrder>
        <nextValueConnector>
            <targetReference>FilterContactsBasedOnEmailDomain</targetReference>
        </nextValueConnector>
        <noMoreValuesConnector>
            <targetReference>AssignDomainFilteredCollection</targetReference>
        </noMoreValuesConnector>
    </loops>
    <loops>
        <name>LoopOverMatchedAccounts</name>
        <label>Loop Over Matched Accounts</label>
        <locationX>1086</locationX>
        <locationY>827</locationY>
        <collectionReference>AccountMatches</collectionReference>
        <iterationOrder>Asc</iterationOrder>
        <nextValueConnector>
            <targetReference>SetAccount_ID</targetReference>
        </nextValueConnector>
        <noMoreValuesConnector>
            <targetReference>SuppliedEmailPopulated</targetReference>
        </noMoreValuesConnector>
    </loops>
    <processMetadataValues>
        <name>BuilderType</name>
        <value>
            <stringValue>LightningFlowBuilder</stringValue>
        </value>
    </processMetadataValues>
    <processMetadataValues>
        <name>CanvasMode</name>
        <value>
            <stringValue>AUTO_LAYOUT_CANVAS</stringValue>
        </value>
    </processMetadataValues>
    <processMetadataValues>
        <name>OriginBuilderType</name>
        <value>
            <stringValue>LightningFlowBuilder</stringValue>
        </value>
    </processMetadataValues>
    <processType>AutoLaunchedFlow</processType>
    <recordLookups>
        <name>GetContacts</name>
        <label>Get Contacts</label>
        <locationX>688</locationX>
        <locationY>1403</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>AssignPreliminaryNumberOfMatches</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>Email</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>$Record.SuppliedEmail</elementReference>
            </value>
        </filters>
        <getFirstRecordOnly>false</getFirstRecordOnly>
        <object>Contact</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordLookups>
        <description>Queries the Account Email Domain Records to check if we can link the account to the Case</description>
        <name>QueryEmailDomainRecords</name>
        <label>Query Email Domain Records</label>
        <locationX>842</locationX>
        <locationY>1727</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>LoopOverDomainRecords</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>Domain__c</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>SuppliedEmailDomain</elementReference>
            </value>
        </filters>
        <getFirstRecordOnly>false</getFirstRecordOnly>
        <object>AccountEmailDomain__c</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordLookups>
        <description>Get Records is to retrieve account records, matching the &apos;Adyen Platform Account Code&apos; with the &apos;BO Account Key&apos; field on a Case.</description>
        <name>QueryMatchingAccounts</name>
        <label>Query Matching Accounts</label>
        <locationX>1414</locationX>
        <locationY>503</locationY>
        <assignNullValuesIfNoRecordsFound>true</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>AssignPreliminaryNumberOfAccountMatches</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>Adyen_Platform_Account_Code__c</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>forBOAccountKeySubString</elementReference>
            </value>
        </filters>
        <filters>
            <field>Adyen_Platform_Account_Code__c</field>
            <operator>IsNull</operator>
            <value>
                <booleanValue>false</booleanValue>
            </value>
        </filters>
        <object>Account</object>
        <outputReference>AccountMatches</outputReference>
        <queriedFields>Id</queriedFields>
    </recordLookups>
    <start>
        <locationX>980</locationX>
        <locationY>0</locationY>
        <connector>
            <targetReference>PopulateRecipientEmail</targetReference>
        </connector>
        <filterFormula>AND(
    OR ( NOT ( ISBLANK ( {!$Record.SuppliedEmail} ) ), NOT ( ISBLANK ( {!$Record.BO_AccountKey__c} ) ) ) ,
    OR ( {!$Record.RecordType.DeveloperName} = &apos;ServiceCase&apos;, {!$Record.RecordType.DeveloperName} = &apos;InternalCase&apos; ),
    OR( ISNEW(), ISCHANGED( {!$Record.SuppliedEmail} ) )
)</filterFormula>
        <object>Case</object>
        <recordTriggerType>CreateAndUpdate</recordTriggerType>
        <triggerType>RecordBeforeSave</triggerType>
    </start>
    <status>Active</status>
    <triggerOrder>200</triggerOrder>
    <variables>
        <description>Stores a list of Account records where the &apos;Adyen Platform Account Code&apos; matches the BO Account Key field of a Case.</description>
        <name>AccountMatches</name>
        <dataType>SObject</dataType>
        <isCollection>true</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
        <objectType>Account</objectType>
    </variables>
    <variables>
        <description>Contains all the contacts that match an Account Email Domain Record.</description>
        <name>collContactsFilteredByDomainMatches</name>
        <dataType>SObject</dataType>
        <isCollection>true</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
        <objectType>Contact</objectType>
    </variables>
    <variables>
        <description>Collection of Contacts that have been matched based on their Email Address</description>
        <name>collPotentialMatchedContacts</name>
        <dataType>SObject</dataType>
        <isCollection>true</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
        <objectType>Contact</objectType>
    </variables>
    <variables>
        <name>currentItem_FilterContactsBasedOnAccount</name>
        <dataType>SObject</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
        <objectType>Contact</objectType>
    </variables>
    <variables>
        <name>currentItem_FilterContactsBasedOnEmailDomain</name>
        <dataType>SObject</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
        <objectType>Contact</objectType>
    </variables>
    <variables>
        <name>GetFirstContactCounter</name>
        <dataType>Number</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
        <scale>0</scale>
        <value>
            <numberValue>0.0</numberValue>
        </value>
    </variables>
    <variables>
        <name>NumberOfMatches</name>
        <dataType>Number</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
        <scale>0</scale>
    </variables>
    <variables>
        <description>All Accounts that are matched through the EmailDomain Records.</description>
        <name>PotentialMatchedAccounts</name>
        <dataType>String</dataType>
        <isCollection>true</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
    </variables>
    <variables>
        <name>varBOAccKeyMatchedAccountId</name>
        <dataType>String</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
    </variables>
    <variables>
        <description>Contains the Id of the matched account</description>
        <name>varDomainMatchedAccountId</name>
        <dataType>String</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
    </variables>
    <variables>
        <name>varDomainMatchedMultipleAccounts</name>
        <dataType>Boolean</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
        <value>
            <booleanValue>false</booleanValue>
        </value>
    </variables>
    <variables>
        <name>varNumberOfAccountMatches</name>
        <dataType>Number</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
        <scale>0</scale>
        <value>
            <numberValue>0.0</numberValue>
        </value>
    </variables>
</Flow>
