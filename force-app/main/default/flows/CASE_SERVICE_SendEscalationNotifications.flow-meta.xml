<?xml version="1.0" encoding="UTF-8"?>
<Flow xmlns="http://soap.sforce.com/2006/04/metadata">
    <actionCalls>
        <name>Chatter_Post_No_Tag</name>
        <label>Chatter Post No Tag</label>
        <locationX>666</locationX>
        <locationY>971</locationY>
        <actionName>chatterPost</actionName>
        <actionType>chatterPost</actionType>
        <connector>
            <targetReference>Get_Duty_Queue</targetReference>
        </connector>
        <flowTransactionModel>CurrentTransaction</flowTransactionModel>
        <inputParameters>
            <name>text</name>
            <value>
                <elementReference>ChatterPostNoTag</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>subjectNameOrId</name>
            <value>
                <elementReference>$Record.Id</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>visibility</name>
            <value>
                <stringValue>InternalUsers</stringValue>
            </value>
        </inputParameters>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </actionCalls>
    <actionCalls>
        <name>Chatter_Post_Owner</name>
        <label>Chatter Post Owner</label>
        <locationX>314</locationX>
        <locationY>1187</locationY>
        <actionName>chatterPost</actionName>
        <actionType>chatterPost</actionType>
        <connector>
            <targetReference>Get_GroupMember</targetReference>
        </connector>
        <flowTransactionModel>CurrentTransaction</flowTransactionModel>
        <inputParameters>
            <name>text</name>
            <value>
                <elementReference>ChatterPostOwner</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>subjectNameOrId</name>
            <value>
                <elementReference>$Record.Id</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>visibility</name>
            <value>
                <stringValue>InternalUsers</stringValue>
            </value>
        </inputParameters>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </actionCalls>
    <actionCalls>
        <name>Chatter_Post_Owner_With_Manager</name>
        <label>Chatter Post Owner With Manager</label>
        <locationX>50</locationX>
        <locationY>1187</locationY>
        <actionName>chatterPost</actionName>
        <actionType>chatterPost</actionType>
        <connector>
            <targetReference>Get_GroupMember</targetReference>
        </connector>
        <flowTransactionModel>CurrentTransaction</flowTransactionModel>
        <inputParameters>
            <name>text</name>
            <value>
                <elementReference>ChatterPostOwnerWithManager</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>subjectNameOrId</name>
            <value>
                <elementReference>$Record.Id</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>visibility</name>
            <value>
                <stringValue>InternalUsers</stringValue>
            </value>
        </inputParameters>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </actionCalls>
    <actionCalls>
        <description>Notify everyone in the Groups added to the collection.</description>
        <name>Group_Notifications</name>
        <label>Group Notifications</label>
        <locationX>424</locationX>
        <locationY>1979</locationY>
        <actionName>customNotificationAction</actionName>
        <actionType>customNotificationAction</actionType>
        <flowTransactionModel>CurrentTransaction</flowTransactionModel>
        <inputParameters>
            <name>customNotifTypeId</name>
            <value>
                <elementReference>Cet_Custom_Notification_Type.Id</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>recipientIds</name>
            <value>
                <elementReference>colGroupIds</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>title</name>
            <value>
                <elementReference>ChatterPostTitle</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>body</name>
            <value>
                <elementReference>ChatterPostNoTag</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>targetId</name>
            <value>
                <elementReference>$Record.Id</elementReference>
            </value>
        </inputParameters>
    </actionCalls>
    <actionCalls>
        <description>This e-mail is send to case owner whose case has been escalated.</description>
        <name>NotifyOwner</name>
        <label>Notify Owner</label>
        <locationX>1810</locationX>
        <locationY>863</locationY>
        <actionName>emailSimple</actionName>
        <actionType>emailSimple</actionType>
        <connector>
            <targetReference>InformMerchant</targetReference>
        </connector>
        <flowTransactionModel>CurrentTransaction</flowTransactionModel>
        <inputParameters>
            <name>emailBody</name>
            <value>
                <elementReference>emailBody</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>emailAddresses</name>
            <value>
                <elementReference>caseOwner</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>sendRichBody</name>
            <value>
                <booleanValue>true</booleanValue>
            </value>
        </inputParameters>
        <inputParameters>
            <name>senderAddress</name>
            <value>
                <elementReference>fromAddress</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>emailSubject</name>
            <value>
                <elementReference>emailSubject</elementReference>
            </value>
        </inputParameters>
    </actionCalls>
    <actionCalls>
        <description>This e-mail is send to case owner and his manager whose case has been escalated.</description>
        <name>NotifyOwnerAndManager</name>
        <label>Notify Owner &amp; Manager</label>
        <locationX>1546</locationX>
        <locationY>863</locationY>
        <actionName>emailSimple</actionName>
        <actionType>emailSimple</actionType>
        <connector>
            <targetReference>InformMerchant</targetReference>
        </connector>
        <flowTransactionModel>CurrentTransaction</flowTransactionModel>
        <inputParameters>
            <name>emailBody</name>
            <value>
                <elementReference>emailBody</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>emailAddressesArray</name>
            <value>
                <elementReference>caseOwnerAndManager</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>sendRichBody</name>
            <value>
                <booleanValue>true</booleanValue>
            </value>
        </inputParameters>
        <inputParameters>
            <name>senderAddress</name>
            <value>
                <elementReference>fromAddress</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>emailSubject</name>
            <value>
                <elementReference>emailSubject</elementReference>
            </value>
        </inputParameters>
    </actionCalls>
    <actionCalls>
        <description>Based on checkbox send email to Merchant once</description>
        <name>OneTimeNotificationToMerchant</name>
        <label>One-Time Notification to Merchant</label>
        <locationX>1744</locationX>
        <locationY>1247</locationY>
        <actionName>Case.NotifyMerchantOfHighPriorityCaseEscalation</actionName>
        <actionType>emailAlert</actionType>
        <connector>
            <targetReference>QueryEmailTemplateSubject</targetReference>
        </connector>
        <flowTransactionModel>CurrentTransaction</flowTransactionModel>
        <inputParameters>
            <name>SObjectRowId</name>
            <value>
                <elementReference>$Record.Id</elementReference>
            </value>
        </inputParameters>
    </actionCalls>
    <apiVersion>56.0</apiVersion>
    <assignments>
        <name>Assign_Duty_Group_Ids</name>
        <label>Assign Duty Group Ids</label>
        <locationX>424</locationX>
        <locationY>1871</locationY>
        <assignmentItems>
            <assignToReference>colGroupIds</assignToReference>
            <operator>Add</operator>
            <value>
                <elementReference>Get_Duty_Group.Id</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>Group_Notifications</targetReference>
        </connector>
    </assignments>
    <assignments>
        <name>Assign_Owner_Group_Ids</name>
        <label>Assign Owner Group Ids</label>
        <locationX>754</locationX>
        <locationY>1403</locationY>
        <assignmentItems>
            <assignToReference>colGroupIds</assignToReference>
            <operator>Add</operator>
            <value>
                <elementReference>Get_Duty_Group.Id</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>Cet_Custom_Notification_Type</targetReference>
        </connector>
    </assignments>
    <assignments>
        <description>Adds the case owner&apos;s and the case owner&apos;s manager email address.</description>
        <name>CaseOwnerAndOwnersManagerEmailAddresses</name>
        <label>Case Owner &amp; Owner&apos;s Manager Email Addresses</label>
        <locationX>1546</locationX>
        <locationY>755</locationY>
        <assignmentItems>
            <assignToReference>caseOwnerAndManager</assignToReference>
            <operator>Add</operator>
            <value>
                <elementReference>$Record.Owner:User.Email</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>caseOwnerAndManager</assignToReference>
            <operator>Add</operator>
            <value>
                <elementReference>$Record.Owner:User.Manager.Email</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>NotifyOwnerAndManager</targetReference>
        </connector>
    </assignments>
    <assignments>
        <description>Assigns the owners email address.</description>
        <name>OwnersEmailAddress</name>
        <label>Owner&apos;s Email Address</label>
        <locationX>1810</locationX>
        <locationY>755</locationY>
        <assignmentItems>
            <assignToReference>caseOwner</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>$Record.Owner:User.Email</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>NotifyOwner</targetReference>
        </connector>
    </assignments>
    <decisions>
        <description>Checks whether the case is owned by an active user.</description>
        <name>ActiveUserOwnership</name>
        <label>Active User Ownership?</label>
        <locationX>1876</locationX>
        <locationY>539</locationY>
        <defaultConnector>
            <targetReference>InformMerchant</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>No</defaultConnectorLabel>
        <rules>
            <name>YesActiveUser</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>$Record.OwnerId</leftValueReference>
                <operator>NotEqualTo</operator>
                <rightValue>
                    <elementReference>$Record.Owner:Group.Id</elementReference>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>$Record.Owner:User.IsActive</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <booleanValue>true</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>decCaseOwnerHasManager</targetReference>
            </connector>
            <label>Yes</label>
        </rules>
    </decisions>
    <decisions>
        <description>Do not create chatter post as new cases are already assigned to the Duty/Platform Monitoring Queue and the case is created in escalated state.</description>
        <name>Case_IsNew</name>
        <label>IsNew?</label>
        <locationX>393</locationX>
        <locationY>431</locationY>
        <defaultConnector>
            <targetReference>EscalationReason_IsChanged</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Update</defaultConnectorLabel>
        <rules>
            <name>Case_Is_New</name>
            <conditionLogic>or</conditionLogic>
            <conditions>
                <leftValueReference>IsNew</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <booleanValue>true</booleanValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>$Record.CreatedDate</leftValueReference>
                <operator>GreaterThan</operator>
                <rightValue>
                    <elementReference>forCreatedDateTime</elementReference>
                </rightValue>
            </conditions>
            <label>Case Is New</label>
        </rules>
    </decisions>
    <decisions>
        <description>Checks whether the case owner&apos;s manager is known.</description>
        <name>decCaseOwnerHasManager</name>
        <label>Case Owner Has Manager?</label>
        <locationX>1678</locationX>
        <locationY>647</locationY>
        <defaultConnector>
            <targetReference>OwnersEmailAddress</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>No</defaultConnectorLabel>
        <rules>
            <name>YesKnown</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>$Record.Owner:User.ManagerId</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>CaseOwnerAndOwnersManagerEmailAddresses</targetReference>
            </connector>
            <label>Yes</label>
        </rules>
    </decisions>
    <decisions>
        <name>Duty_Group_Found</name>
        <label>Duty Group Found?</label>
        <locationX>721</locationX>
        <locationY>755</locationY>
        <defaultConnectorLabel>NOT Found</defaultConnectorLabel>
        <rules>
            <name>Found</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>Get_Duty_Group</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>User_Ownership</targetReference>
            </connector>
            <label>Found</label>
        </rules>
    </decisions>
    <decisions>
        <name>Escalation_IsChanged</name>
        <label>Escalation IsChanged?</label>
        <locationX>2074</locationX>
        <locationY>431</locationY>
        <defaultConnectorLabel>NOT Changed</defaultConnectorLabel>
        <rules>
            <name>Changed</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>$Record.IsEscalated</leftValueReference>
                <operator>IsChanged</operator>
                <rightValue>
                    <booleanValue>true</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>ActiveUserOwnership</targetReference>
            </connector>
            <label>Changed</label>
        </rules>
    </decisions>
    <decisions>
        <name>Escalation_Reason</name>
        <label>Escalation Reason</label>
        <locationX>1233</locationX>
        <locationY>323</locationY>
        <defaultConnector>
            <targetReference>Escalation_IsChanged</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Other Reasons</defaultConnectorLabel>
        <rules>
            <name>Emergency_Email_Used_By_Customer</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>$Record.EscalationReason__c</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Emergency Email Used By Customer</stringValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>Case_IsNew</targetReference>
            </connector>
            <label>Emergency Email Used By Customer</label>
        </rules>
    </decisions>
    <decisions>
        <description>Create post if the Case is already escalated but the reason is changed to Emergency Email Used By Customer.</description>
        <name>EscalationReason_IsChanged</name>
        <label>EscalationReason IsChanged?</label>
        <locationX>1001</locationX>
        <locationY>539</locationY>
        <defaultConnectorLabel>NOT Changed</defaultConnectorLabel>
        <rules>
            <name>IsChanged</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>$Record.EscalationReason__c</leftValueReference>
                <operator>IsChanged</operator>
                <rightValue>
                    <booleanValue>true</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>Get_Duty_Group</targetReference>
            </connector>
            <label>IsChanged</label>
        </rules>
    </decisions>
    <decisions>
        <description>KEEP this decision even if not used now. To apply different logic when the Owner is part of Duty or not. Pilot and business will provide feedback.
Check if the Owner (user) is part of a specific Group. Then only tag the owner, else tag the Duty/PlatformMonitoring group as well.</description>
        <name>GroupMember_Found</name>
        <label>GroupMember Found?</label>
        <locationX>182</locationX>
        <locationY>1487</locationY>
        <defaultConnector>
            <targetReference>Cet_Custom_Notification_Type</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>NOT Found</defaultConnectorLabel>
        <rules>
            <name>Found_GroupMember</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>Get_GroupMember</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>Cet_Custom_Notification_Type</targetReference>
            </connector>
            <label>Found GroupMember</label>
        </rules>
    </decisions>
    <decisions>
        <description>When &apos;Inform Merchant (One Time Only)&apos; is set to True, a notification is send to the Merchant to inform them that the case is picked up with urgency.</description>
        <name>InformMerchant</name>
        <label>Inform Merchant</label>
        <locationX>1876</locationX>
        <locationY>1139</locationY>
        <defaultConnectorLabel>No</defaultConnectorLabel>
        <rules>
            <name>InformMerchantCheckboxTrue</name>
            <conditionLogic>1 AND (2 OR 3) AND 4</conditionLogic>
            <conditions>
                <leftValueReference>$Record.InformMerchantOneTimeOnly__c</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <booleanValue>true</booleanValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>$Record.ContactId</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>$Record.SuppliedEmail</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>$Record.IsVisibleInPortal__c</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <booleanValue>true</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>OneTimeNotificationToMerchant</targetReference>
            </connector>
            <doesRequireRecordChangedToMeetCriteria>true</doesRequireRecordChangedToMeetCriteria>
            <label>Yes</label>
        </rules>
    </decisions>
    <decisions>
        <name>Manger_Found</name>
        <label>Manger Found?</label>
        <locationX>182</locationX>
        <locationY>1079</locationY>
        <defaultConnector>
            <targetReference>Chatter_Post_Owner</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>NOT Found</defaultConnectorLabel>
        <rules>
            <name>Found_Manager</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>Get_Manager</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>Chatter_Post_Owner_With_Manager</targetReference>
            </connector>
            <label>Found Manager</label>
        </rules>
    </decisions>
    <decisions>
        <description>Check if the Case is owned by a group that is not Duty/PlatformMonitoring.
Use This decision for different actions if the owner is the Duty Team or any other Team.</description>
        <name>Notify_Group</name>
        <label>Notify Group?</label>
        <locationX>666</locationX>
        <locationY>1187</locationY>
        <defaultConnector>
            <targetReference>Get_Group</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Other Team</defaultConnectorLabel>
        <rules>
            <name>Duty_Owned</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>Get_Duty_Queue.Id</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <elementReference>$Record.OwnerId</elementReference>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>Cet_Custom_Notification_Type</targetReference>
            </connector>
            <label>Duty Owned</label>
        </rules>
    </decisions>
    <decisions>
        <description>Checks whether the case is owned by an active user.</description>
        <name>User_Ownership</name>
        <label>User Ownership?</label>
        <locationX>424</locationX>
        <locationY>863</locationY>
        <defaultConnector>
            <targetReference>Chatter_Post_No_Tag</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Group Owned</defaultConnectorLabel>
        <rules>
            <name>User_Owned</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>$Record.OwnerId</leftValueReference>
                <operator>NotEqualTo</operator>
                <rightValue>
                    <elementReference>$Record.Owner:Group.Id</elementReference>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>$Record.Owner:User.IsActive</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <booleanValue>true</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>Get_Manager</targetReference>
            </connector>
            <label>User Owned</label>
        </rules>
    </decisions>
    <description>Add notification logic of Cases Escalated by including the Emergency Email Address. Updates to notify full Duty Team and full owner Team.</description>
    <environments>Default</environments>
    <formulas>
        <description>Case is created within the last 5 minutes.</description>
        <name>forCreatedDateTime</name>
        <dataType>DateTime</dataType>
        <expression>{!$Flow.CurrentDateTime} - 1/(24*60)</expression>
    </formulas>
    <formulas>
        <name>IsNew</name>
        <dataType>Boolean</dataType>
        <expression>ISNEW()</expression>
    </formulas>
    <interviewLabel>CASE_SERVICE_SendEscalationNotifications {!$Flow.CurrentDateTime}</interviewLabel>
    <label>CASE_SERVICE_SendEscalationNotifications</label>
    <processMetadataValues>
        <name>BuilderType</name>
        <value>
            <stringValue>LightningFlowBuilder</stringValue>
        </value>
    </processMetadataValues>
    <processMetadataValues>
        <name>CanvasMode</name>
        <value>
            <stringValue>AUTO_LAYOUT_CANVAS</stringValue>
        </value>
    </processMetadataValues>
    <processMetadataValues>
        <name>OriginBuilderType</name>
        <value>
            <stringValue>LightningFlowBuilder</stringValue>
        </value>
    </processMetadataValues>
    <processType>AutoLaunchedFlow</processType>
    <recordCreates>
        <name>CreateFeedItem</name>
        <label>Create Feed Item</label>
        <locationX>1744</locationX>
        <locationY>1463</locationY>
        <inputAssignments>
            <field>Body</field>
            <value>
                <elementReference>varEmailTemplateSubject</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <field>IsRichText</field>
            <value>
                <booleanValue>true</booleanValue>
            </value>
        </inputAssignments>
        <inputAssignments>
            <field>ParentId</field>
            <value>
                <elementReference>$Record.Id</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <field>Visibility</field>
            <value>
                <stringValue>InternalUsers</stringValue>
            </value>
        </inputAssignments>
        <object>FeedItem</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordCreates>
    <recordLookups>
        <name>Cet_Custom_Notification_Type</name>
        <label>Cet Custom Notification Type</label>
        <locationX>424</locationX>
        <locationY>1763</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>Assign_Duty_Group_Ids</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>DeveloperName</field>
            <operator>EqualTo</operator>
            <value>
                <stringValue>CaseUserReassigned</stringValue>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>CustomNotificationType</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordLookups>
        <description>Get the Duty/PlatformMonitoring Group.</description>
        <name>Get_Duty_Group</name>
        <label>Get Duty Group</label>
        <locationX>721</locationX>
        <locationY>647</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>Duty_Group_Found</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>Type</field>
            <operator>EqualTo</operator>
            <value>
                <stringValue>Regular</stringValue>
            </value>
        </filters>
        <filters>
            <field>DeveloperName</field>
            <operator>EqualTo</operator>
            <value>
                <stringValue>PlatformMonitoring</stringValue>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>Group</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordLookups>
        <description>Get the Duty/PlatformMonitoring Group.</description>
        <name>Get_Duty_Queue</name>
        <label>Get Duty Queue</label>
        <locationX>666</locationX>
        <locationY>1079</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>Notify_Group</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>Type</field>
            <operator>EqualTo</operator>
            <value>
                <stringValue>Queue</stringValue>
            </value>
        </filters>
        <filters>
            <field>DeveloperName</field>
            <operator>EqualTo</operator>
            <value>
                <stringValue>PlatformMonitoring</stringValue>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>Group</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordLookups>
        <description>Get the Group of the Queue Owner of the Case.</description>
        <name>Get_Group</name>
        <label>Get Group</label>
        <locationX>754</locationX>
        <locationY>1295</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>Assign_Owner_Group_Ids</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>DeveloperName</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>$Record.Owner:Group.DeveloperName</elementReference>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>Group</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordLookups>
        <description>Check if the User is part of the group</description>
        <name>Get_GroupMember</name>
        <label>Get GroupMember</label>
        <locationX>182</locationX>
        <locationY>1379</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>GroupMember_Found</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>GroupId</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>Get_Duty_Group.Id</elementReference>
            </value>
        </filters>
        <filters>
            <field>UserOrGroupId</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>$Record.OwnerId</elementReference>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>GroupMember</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordLookups>
        <description>Lookup the Manager of the Owner.</description>
        <name>Get_Manager</name>
        <label>Get Manager</label>
        <locationX>182</locationX>
        <locationY>971</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>Manger_Found</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>Id</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>$Record.Owner:User.ManagerId</elementReference>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>User</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordLookups>
        <name>QueryEmailTemplateSubject</name>
        <label>Query Email Template Subject</label>
        <locationX>1744</locationX>
        <locationY>1355</locationY>
        <assignNullValuesIfNoRecordsFound>true</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>CreateFeedItem</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>DeveloperName</field>
            <operator>EqualTo</operator>
            <value>
                <stringValue>MerchantEscalationNotification</stringValue>
            </value>
        </filters>
        <object>EmailTemplate</object>
        <outputAssignments>
            <assignToReference>varEmailTemplateSubject</assignToReference>
            <field>Subject</field>
        </outputAssignments>
    </recordLookups>
    <start>
        <locationX>1107</locationX>
        <locationY>0</locationY>
        <connector>
            <targetReference>Escalation_Reason</targetReference>
        </connector>
        <filterFormula>AND (
OR({!$Record.RecordType.DeveloperName} == &apos;ServiceCase&apos;, {!$Record.RecordType.DeveloperName} == &apos;InternalCase&apos;),
{!$Record.IsShopperCase__c} == false,
{!$Record.IsEscalated} == true,
{!$Permission.BypassCaseTriggerValidationMigration} = false
)</filterFormula>
        <object>Case</object>
        <recordTriggerType>CreateAndUpdate</recordTriggerType>
        <triggerType>RecordAfterSave</triggerType>
    </start>
    <status>Active</status>
    <textTemplates>
        <name>ChatterPostNoTag</name>
        <isViewedAsPlainText>true</isViewedAsPlainText>
        <text>🔥 Heads-Up: An emergency address was added to the thread for Case {!$Record.CaseNumber}. #emergency</text>
    </textTemplates>
    <textTemplates>
        <name>ChatterPostOwner</name>
        <isViewedAsPlainText>true</isViewedAsPlainText>
        <text>🔥 Heads-Up: @[{!$Record.OwnerId}] An emergency address was added to the thread for Case {!$Record.CaseNumber}. #emergency</text>
    </textTemplates>
    <textTemplates>
        <name>ChatterPostOwnerWithManager</name>
        <isViewedAsPlainText>true</isViewedAsPlainText>
        <text>🔥 Heads-Up: @[{!$Record.OwnerId}] @[{!Get_Manager.Id}] An emergency address was added to the thread for Case {!$Record.CaseNumber}. #emergency</text>
    </textTemplates>
    <textTemplates>
        <name>ChatterPostTitle</name>
        <isViewedAsPlainText>true</isViewedAsPlainText>
        <text>Emergency Email Used</text>
    </textTemplates>
    <textTemplates>
        <description>Case escalation email body.</description>
        <name>emailBody</name>
        <isViewedAsPlainText>false</isViewedAsPlainText>
        <text>&lt;p&gt;Case {!$Record.CaseNumber} owned by {!$Record.Owner:User.FirstName} has just been escalated by {!$Record.EscalationRequester__r.FirstName}. The escalation reason is {!$Record.EscalationReason__c}.&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;*Case Details*&lt;/p&gt;&lt;p&gt;{!$Record.Account.Name}&lt;/p&gt;&lt;p&gt;{!$Record.Contact.FirstName}&lt;/p&gt;&lt;p&gt;{!$Record.Status}&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;Adyen Support&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;https://happy-hunting--servicedev.sandbox.file.force.com/sfc/servlet.shepherd/version/download/0687E000001P1qe?asPdf=false&amp;amp;operationContext=CHATTER&quot; alt=&quot;AdyenLogoResized.png&quot;&gt;&lt;/p&gt;</text>
    </textTemplates>
    <textTemplates>
        <description>Case escalation email subject.</description>
        <name>emailSubject</name>
        <isViewedAsPlainText>true</isViewedAsPlainText>
        <text>Case {!$Record.CaseNumber} Has Been Escalated</text>
    </textTemplates>
    <variables>
        <description>Case owner&apos;s email address.</description>
        <name>caseOwner</name>
        <dataType>String</dataType>
        <isCollection>false</isCollection>
        <isInput>true</isInput>
        <isOutput>false</isOutput>
    </variables>
    <variables>
        <description>Case Owner and Owner&apos;s Manager email addresses.</description>
        <name>caseOwnerAndManager</name>
        <dataType>String</dataType>
        <isCollection>true</isCollection>
        <isInput>true</isInput>
        <isOutput>false</isOutput>
    </variables>
    <variables>
        <name>colGroupIds</name>
        <dataType>String</dataType>
        <isCollection>true</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
    </variables>
    <variables>
        <description>OWD &apos;from&apos; email address</description>
        <name>fromAddress</name>
        <dataType>String</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
        <value>
            <stringValue>developer-experience@adyen.com</stringValue>
        </value>
    </variables>
    <variables>
        <name>varEmailTemplateSubject</name>
        <dataType>String</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
    </variables>
</Flow>
