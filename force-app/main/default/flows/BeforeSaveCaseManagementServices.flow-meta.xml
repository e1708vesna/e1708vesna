<?xml version="1.0" encoding="UTF-8"?>
<Flow xmlns="http://soap.sforce.com/2006/04/metadata">
    <apiVersion>55.0</apiVersion>
    <assignments>
        <description>Stamp customer segmentation from the related account to this case.</description>
        <name>assCustomerSegmentation</name>
        <label>Set Customer Segmentation</label>
        <locationX>600</locationX>
        <locationY>5795</locationY>
        <assignmentItems>
            <assignToReference>$Record.CustomerSegmentation__c</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>forCustomerSegmentation</elementReference>
            </value>
        </assignmentItems>
    </assignments>
    <assignments>
        <description>If there is an account linked to the case, keep the business model on the case in sync with the business model mentioned on the account. When the business model is not populated on the account, clear the business model on the case as well.</description>
        <name>assignPillar</name>
        <label>Assign Pillar</label>
        <locationX>600</locationX>
        <locationY>4895</locationY>
        <assignmentItems>
            <assignToReference>$Record.BusinessModel__c</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>$Record.Account.BusinessModelBasedOnAdyenData__c</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>PillarRoutingFields</targetReference>
        </connector>
    </assignments>
    <assignments>
        <name>assignPillarRouting</name>
        <label>assignPillarRouting</label>
        <locationX>600</locationX>
        <locationY>5195</locationY>
        <assignmentItems>
            <assignToReference>$Record.BusinessModelRouting__c</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>$Record.BusinessModel__c</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>UseRegionRoutingFields</targetReference>
        </connector>
    </assignments>
    <assignments>
        <description>Clear the field &apos;Business Model&apos;. If no account is related to the case, then there is no pillar.</description>
        <name>ClearPillar</name>
        <label>Clear Pillar</label>
        <locationX>864</locationX>
        <locationY>4895</locationY>
        <assignmentItems>
            <assignToReference>$Record.BusinessModel__c</assignToReference>
            <operator>Assign</operator>
            <value>
                <stringValue></stringValue>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>PillarRoutingFields</targetReference>
        </connector>
    </assignments>
    <assignments>
        <name>ClearPillarRouting</name>
        <label>Clear Pillar Routing</label>
        <locationX>864</locationX>
        <locationY>5195</locationY>
        <assignmentItems>
            <assignToReference>$Record.BusinessModelRouting__c</assignToReference>
            <operator>Assign</operator>
            <value>
                <stringValue></stringValue>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>UseRegionRoutingFields</targetReference>
        </connector>
    </assignments>
    <assignments>
        <name>ClearRegionRouting</name>
        <label>Clear Region Routing</label>
        <locationX>864</locationX>
        <locationY>5495</locationY>
        <assignmentItems>
            <assignToReference>$Record.RegionRouting__c</assignToReference>
            <operator>Assign</operator>
            <value>
                <stringValue></stringValue>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>NewCaseOrAccountChanged</targetReference>
        </connector>
    </assignments>
    <assignments>
        <description>Clear VIPAccount__c on the case, but leave the priority as is.</description>
        <name>ClearVIP</name>
        <label>Clear VIP</label>
        <locationX>864</locationX>
        <locationY>3803</locationY>
        <assignmentItems>
            <assignToReference>$Record.VIPAccount__c</assignToReference>
            <operator>Assign</operator>
            <value>
                <booleanValue>false</booleanValue>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>Type</targetReference>
        </connector>
    </assignments>
    <assignments>
        <name>ClearWaitingForMerchant</name>
        <label>Clear &apos;Waiting for Merchant&apos;</label>
        <locationX>1018</locationX>
        <locationY>1403</locationY>
        <assignmentItems>
            <assignToReference>$Record.WaitingOnMerchantDateTime__c</assignToReference>
            <operator>Assign</operator>
        </assignmentItems>
        <connector>
            <targetReference>Status</targetReference>
        </connector>
    </assignments>
    <assignments>
        <description>The complexity is left empty.</description>
        <name>Empty</name>
        <label>Empty</label>
        <locationX>963</locationX>
        <locationY>4103</locationY>
        <assignmentItems>
            <assignToReference>$Record.ComplexityNumber__c</assignToReference>
            <operator>Assign</operator>
            <value>
                <stringValue></stringValue>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>AccountPillar</targetReference>
        </connector>
    </assignments>
    <assignments>
        <description>Hide the case in portal by setting the field &apos;Visible in Portal&apos; to false</description>
        <name>HideCaseInPortal</name>
        <label>Hide Case In Portal</label>
        <locationX>754</locationX>
        <locationY>503</locationY>
        <assignmentItems>
            <assignToReference>$Record.IsVisibleInPortal__c</assignToReference>
            <operator>Assign</operator>
            <value>
                <booleanValue>false</booleanValue>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>ActionType</targetReference>
        </connector>
    </assignments>
    <assignments>
        <description>Hide the case in portal by setting the field &apos;Visible in Portal&apos; to false</description>
        <name>HideCaseInPortal2</name>
        <label>Hide Case In Portal</label>
        <locationX>1018</locationX>
        <locationY>503</locationY>
        <assignmentItems>
            <assignToReference>$Record.IsVisibleInPortal__c</assignToReference>
            <operator>Assign</operator>
            <value>
                <booleanValue>false</booleanValue>
            </value>
        </assignmentItems>
    </assignments>
    <assignments>
        <description>Populates the Previous Queue field with the previous Owner value.</description>
        <name>PreviousQueue</name>
        <label>Previous Queue</label>
        <locationX>1018</locationX>
        <locationY>2003</locationY>
        <assignmentItems>
            <assignToReference>$Record.PreviousQueueID__c</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>$Record.Owner:Group.Id</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>$Record.PreviousQueue__c</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>$Record.Owner:Group.DeveloperName</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>$Record.PreviousQueueEmail__c</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>$Record.Owner:Group.Email</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>accountServiceLevel</targetReference>
        </connector>
    </assignments>
    <assignments>
        <name>SetHypercareOnCase</name>
        <label>Set Hypercare on Case</label>
        <locationX>314</locationX>
        <locationY>611</locationY>
        <assignmentItems>
            <assignToReference>$Record.HypercareMode__c</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>$Record.Account.HypercareMode__c</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>UpdateVisibilityInPortal</targetReference>
        </connector>
    </assignments>
    <assignments>
        <name>SetPreviousQueueFieldsAssignment</name>
        <label>Set Previous Queue Fields</label>
        <locationX>182</locationX>
        <locationY>1403</locationY>
        <assignmentItems>
            <assignToReference>$Record.PreviousQueueID__c</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>$Record.Owner:Group.Id</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>$Record.PreviousQueueEmail__c</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>$Record.Owner:Group.Email</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>$Record.PreviousQueue__c</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>$Record.Owner:Group.DeveloperName</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>CaseTransferOrCaseCollaboration</targetReference>
        </connector>
    </assignments>
    <assignments>
        <description>Set priority on the case to &apos;High&apos;</description>
        <name>SetPriorityHigh</name>
        <label>Set priority to High &amp; Fill VIP Field</label>
        <locationX>600</locationX>
        <locationY>3803</locationY>
        <assignmentItems>
            <assignToReference>$Record.Priority</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>upgradePriorityToHigh</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>$Record.VIPAccount__c</assignToReference>
            <operator>Assign</operator>
            <value>
                <booleanValue>true</booleanValue>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>Type</targetReference>
        </connector>
    </assignments>
    <assignments>
        <description>Set priority on the case to &apos;Medium&apos;</description>
        <name>SetPriorityMedium</name>
        <label>Set priority to Medium</label>
        <locationX>182</locationX>
        <locationY>3419</locationY>
        <assignmentItems>
            <assignToReference>$Record.Priority</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>upgradePriorityToMedium</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>accountServiceLevel</targetReference>
        </connector>
    </assignments>
    <assignments>
        <description>Set priority of a case to &apos;Normal&apos; if it is not populated yet</description>
        <name>SetPriorityNormal</name>
        <label>Set priority to Normal</label>
        <locationX>446</locationX>
        <locationY>3419</locationY>
        <assignmentItems>
            <assignToReference>$Record.Priority</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>defaultPriorityNormal</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>accountServiceLevel</targetReference>
        </connector>
    </assignments>
    <assignments>
        <name>SetRegionRouting</name>
        <label>Set Region Routing</label>
        <locationX>600</locationX>
        <locationY>5495</locationY>
        <assignmentItems>
            <assignToReference>$Record.RegionRouting__c</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>$Record.CaseOriginRegion__c</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>NewCaseOrAccountChanged</targetReference>
        </connector>
    </assignments>
    <assignments>
        <description>Set checkbox &apos;Visible in Portal&apos; to true</description>
        <name>SetVisibleInPortal</name>
        <label>Set Visible In Portal</label>
        <locationX>314</locationX>
        <locationY>911</locationY>
        <assignmentItems>
            <assignToReference>$Record.IsVisibleInPortal__c</assignToReference>
            <operator>Assign</operator>
            <value>
                <booleanValue>true</booleanValue>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>ActionType</targetReference>
        </connector>
    </assignments>
    <assignments>
        <name>StampCaseOriginTransfer</name>
        <label>Stamp Case Origin (Transfer)</label>
        <locationX>314</locationX>
        <locationY>1703</locationY>
        <assignmentItems>
            <assignToReference>$Record.Origin</assignToReference>
            <operator>Assign</operator>
            <value>
                <stringValue>ZD - Transfer</stringValue>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>Shopper</targetReference>
        </connector>
    </assignments>
    <assignments>
        <name>StampsCaseOriginCollaboration</name>
        <label>Stamp Case Origin (Collaboration)</label>
        <locationX>50</locationX>
        <locationY>1703</locationY>
        <assignmentItems>
            <assignToReference>$Record.Origin</assignToReference>
            <operator>Assign</operator>
            <value>
                <stringValue>ZD - Collaboration</stringValue>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>Shopper</targetReference>
        </connector>
    </assignments>
    <assignments>
        <description>Sets the timestamp.</description>
        <name>StartCounting</name>
        <label>Start Counting</label>
        <locationX>754</locationX>
        <locationY>1703</locationY>
        <assignmentItems>
            <assignToReference>$Record.WaitingOnMerchantDateTime__c</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>$Flow.CurrentDateTime</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>Queue</targetReference>
        </connector>
    </assignments>
    <assignments>
        <name>TimeReopened</name>
        <label>Time Reopened</label>
        <locationX>1018</locationX>
        <locationY>1703</locationY>
        <assignmentItems>
            <assignToReference>$Record.TimeReopened__c</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>$Flow.CurrentDateTime</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>$Record.Reopened__c</assignToReference>
            <operator>Assign</operator>
            <value>
                <booleanValue>true</booleanValue>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>$Record.Autoclosed__c</assignToReference>
            <operator>Assign</operator>
            <value>
                <booleanValue>false</booleanValue>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>$Record.AutoCloseReason__c</assignToReference>
            <operator>Assign</operator>
        </assignmentItems>
        <connector>
            <targetReference>Queue</targetReference>
        </connector>
    </assignments>
    <assignments>
        <name>ToInProgress</name>
        <label>To &apos;In Progress&apos;</label>
        <locationX>1282</locationX>
        <locationY>1703</locationY>
        <assignmentItems>
            <assignToReference>$Record.Status</assignToReference>
            <operator>Assign</operator>
            <value>
                <stringValue>In Progress</stringValue>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>Queue</targetReference>
        </connector>
    </assignments>
    <assignments>
        <description>Updates the case complexity field.</description>
        <name>UpdateComplexity</name>
        <label>Update Complexity</label>
        <locationX>501</locationX>
        <locationY>4595</locationY>
        <assignmentItems>
            <assignToReference>$Record.ComplexityNumber__c</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>complexityScore</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>AccountPillar</targetReference>
        </connector>
    </assignments>
    <constants>
        <name>incomingZDemail</name>
        <dataType>String</dataType>
        <value>
            <stringValue>support@adyen.com,partnermanager@adyen.com,possupport@adyen.com</stringValue>
        </value>
    </constants>
    <decisions>
        <name>AccountInHypercare</name>
        <label>Account in Hypercare?</label>
        <locationX>446</locationX>
        <locationY>503</locationY>
        <defaultConnector>
            <targetReference>UpdateVisibilityInPortal</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Hypercare Off</defaultConnectorLabel>
        <rules>
            <name>HypercareOn</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>$Record.Account.HypercareMode__c</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <booleanValue>true</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>SetHypercareOnCase</targetReference>
            </connector>
            <label>Hypercare On</label>
        </rules>
    </decisions>
    <decisions>
        <description>Checks if the account pillar need to be populated.</description>
        <name>AccountPillar</name>
        <label>Account Pillar</label>
        <locationX>732</locationX>
        <locationY>4787</locationY>
        <defaultConnector>
            <targetReference>ClearPillar</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>No Account</defaultConnectorLabel>
        <rules>
            <name>outcomeAccountPillarPopulated</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>$Record.AccountId</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>assignPillar</targetReference>
            </connector>
            <label>Populate Pillar</label>
        </rules>
    </decisions>
    <decisions>
        <description>To which account service level does this case belongs to?</description>
        <name>accountServiceLevel</name>
        <label>Account Service Level?</label>
        <locationX>732</locationX>
        <locationY>3695</locationY>
        <defaultConnector>
            <targetReference>ClearVIP</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>No VIP</defaultConnectorLabel>
        <rules>
            <name>VIPAccount</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>$Record.AccountId</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>$Record.Account.ServiceLevel__c</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>VIP</stringValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>SetPriorityHigh</targetReference>
            </connector>
            <label>VIP</label>
        </rules>
    </decisions>
    <decisions>
        <description>Is the record being created or updated?</description>
        <name>ActionType</name>
        <label>Action?</label>
        <locationX>732</locationX>
        <locationY>1187</locationY>
        <defaultConnector>
            <targetReference>NotWaitingForMerchant</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>on Update</defaultConnectorLabel>
        <rules>
            <name>triggerOnCreate</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>onCreate</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <booleanValue>true</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>SetPreviousQueueFields</targetReference>
            </connector>
            <label>on Create</label>
        </rules>
    </decisions>
    <decisions>
        <description>Checks if the current blocking record is applicable.</description>
        <name>BlockCase</name>
        <label>Block Case?</label>
        <locationX>534</locationX>
        <locationY>2927</locationY>
        <defaultConnector>
            <targetReference>CheckBlockingList</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Don&apos;t Block</defaultConnectorLabel>
        <rules>
            <name>Block</name>
            <conditionLogic>or</conditionLogic>
            <conditions>
                <leftValueReference>CheckBlockingList.Subject__c</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>true</booleanValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>$Record.Subject</leftValueReference>
                <operator>Contains</operator>
                <rightValue>
                    <elementReference>CheckBlockingList.Subject__c</elementReference>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>BlockCaseUpdate</targetReference>
            </connector>
            <label>Block</label>
        </rules>
    </decisions>
    <decisions>
        <name>CaseTransferOrCaseCollaboration</name>
        <label>Case Transfer or Case Collaboration?</label>
        <locationX>314</locationX>
        <locationY>1595</locationY>
        <defaultConnector>
            <targetReference>Shopper</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Default Outcome</defaultConnectorLabel>
        <rules>
            <name>CaseCollaborationZDToSF</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>incomingZDemail</leftValueReference>
                <operator>Contains</operator>
                <rightValue>
                    <elementReference>$Record.SuppliedEmail</elementReference>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>$Record.Description</leftValueReference>
                <operator>Contains</operator>
                <rightValue>
                    <stringValue>ZDtoSFCaseCollaboration</stringValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>StampsCaseOriginCollaboration</targetReference>
            </connector>
            <label>Case Collaboration (ZD to SF)</label>
        </rules>
        <rules>
            <name>CaseTransferZDToSF</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>incomingZDemail</leftValueReference>
                <operator>Contains</operator>
                <rightValue>
                    <elementReference>$Record.SuppliedEmail</elementReference>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>$Record.Description</leftValueReference>
                <operator>Contains</operator>
                <rightValue>
                    <stringValue>ZDtoSFCaseTransfer</stringValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>StampCaseOriginTransfer</targetReference>
            </connector>
            <label>Case Transfer (ZD to SF)</label>
        </rules>
    </decisions>
    <decisions>
        <description>Is this case created via a webform?</description>
        <name>CreateViaWebform</name>
        <label>Create via Webform?</label>
        <locationX>314</locationX>
        <locationY>3311</locationY>
        <defaultConnector>
            <targetReference>SetPriorityNormal</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>No</defaultConnectorLabel>
        <rules>
            <name>YesViaWebformCreated</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>$Record.Origin</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Webform</stringValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>SetPriorityMedium</targetReference>
            </connector>
            <label>Yes</label>
        </rules>
    </decisions>
    <decisions>
        <description>If it is found then change the status of the case to Completed.</description>
        <name>Found</name>
        <label>Shopper Case</label>
        <locationX>314</locationX>
        <locationY>2303</locationY>
        <defaultConnector>
            <targetReference>SearchBlockingList</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>No</defaultConnectorLabel>
        <rules>
            <name>YsNotAllowed</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>senderDomain</leftValueReference>
                <operator>StartsWith</operator>
                <rightValue>
                    <elementReference>matchingDomain</elementReference>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>QueryShopperAllowedQueues.Id</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>true</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>GetUnmanagedUser</targetReference>
            </connector>
            <label>Shopper case - Not Allowed</label>
        </rules>
        <rules>
            <name>YesAllowed</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>senderDomain</leftValueReference>
                <operator>StartsWith</operator>
                <rightValue>
                    <elementReference>matchingDomain</elementReference>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>QueryShopperAllowedQueues.Id</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>MarkAsShopperCaseNoActions</targetReference>
            </connector>
            <label>Shopper case - Allowed</label>
        </rules>
    </decisions>
    <decisions>
        <description>Checks if the current user has the Migration Custom permission</description>
        <name>MigrationUser</name>
        <label>Migration User?</label>
        <locationX>215</locationX>
        <locationY>287</locationY>
        <defaultConnector>
            <targetReference>RecordtypeSplit</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Default Outcome</defaultConnectorLabel>
        <rules>
            <name>YesMigrationUser</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>$Permission.BypassCaseTriggerValidationMigration</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <booleanValue>true</booleanValue>
                </rightValue>
            </conditions>
            <label>Yes</label>
        </rules>
    </decisions>
    <decisions>
        <description>Is a new case created, or is the account field on the existing case updated?</description>
        <name>NewCaseOrAccountChanged</name>
        <label>New Case or Account Changed?</label>
        <locationX>732</locationX>
        <locationY>5687</locationY>
        <defaultConnectorLabel>No</defaultConnectorLabel>
        <rules>
            <name>YesNewCaseOrAcountChanged</name>
            <conditionLogic>or</conditionLogic>
            <conditions>
                <leftValueReference>onCreate</leftValueReference>
                <operator>EqualTo</operator>
            </conditions>
            <conditions>
                <leftValueReference>$Record.AccountId</leftValueReference>
                <operator>IsChanged</operator>
                <rightValue>
                    <booleanValue>true</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>assCustomerSegmentation</targetReference>
            </connector>
            <label>Yes</label>
        </rules>
    </decisions>
    <decisions>
        <description>Clears out the &apos;Waiting for Merchant Date/Time&apos; field.</description>
        <name>NotWaitingForMerchant</name>
        <label>Not &apos;Waiting for Merchant&apos;</label>
        <locationX>1150</locationX>
        <locationY>1295</locationY>
        <defaultConnector>
            <targetReference>Status</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>No</defaultConnectorLabel>
        <rules>
            <name>YesNotWaitingForMerchant</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>$Record.Status</leftValueReference>
                <operator>NotEqualTo</operator>
                <rightValue>
                    <stringValue>Waiting for Merchant</stringValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>ClearWaitingForMerchant</targetReference>
            </connector>
            <label>Yes</label>
        </rules>
    </decisions>
    <decisions>
        <description>Sets the pillar fields that are used for routing.</description>
        <name>PillarRoutingFields</name>
        <label>Pillar Routing Fields</label>
        <locationX>732</locationX>
        <locationY>5087</locationY>
        <defaultConnector>
            <targetReference>ClearPillarRouting</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Clear Pillar Routing Fields</defaultConnectorLabel>
        <rules>
            <name>Set_Pillar_Routing_Fields</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>$Record.UseBusinessModelForRouting__c</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <booleanValue>true</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>assignPillarRouting</targetReference>
            </connector>
            <label>Set Pillar Routing Fields</label>
        </rules>
    </decisions>
    <decisions>
        <name>Queue</name>
        <label>Queue?</label>
        <locationX>1150</locationX>
        <locationY>1895</locationY>
        <defaultConnector>
            <targetReference>accountServiceLevel</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>No</defaultConnectorLabel>
        <rules>
            <name>YesQueue</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>$Record.Owner:Group.Id</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>PreviousQueue</targetReference>
            </connector>
            <label>Yes</label>
        </rules>
    </decisions>
    <decisions>
        <description>Split into different record types</description>
        <name>RecordtypeSplit</name>
        <label>Recordtype</label>
        <locationX>732</locationX>
        <locationY>395</locationY>
        <defaultConnector>
            <targetReference>HideCaseInPortal2</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Other</defaultConnectorLabel>
        <rules>
            <name>RecordTypeServiceCase</name>
            <conditionLogic>or</conditionLogic>
            <conditions>
                <leftValueReference>$Record.RecordType.DeveloperName</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>ServiceCase</stringValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>AccountInHypercare</targetReference>
            </connector>
            <label>Service Case</label>
        </rules>
        <rules>
            <name>RecordTypeInternalCase</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>$Record.RecordType.DeveloperName</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>InternalCase</stringValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>HideCaseInPortal</targetReference>
            </connector>
            <label>Internal Case</label>
        </rules>
    </decisions>
    <decisions>
        <name>SetPreviousQueueFields</name>
        <label>Set Previous Queue Fields</label>
        <locationX>314</locationX>
        <locationY>1295</locationY>
        <defaultConnector>
            <targetReference>CaseTransferOrCaseCollaboration</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Default Outcome</defaultConnectorLabel>
        <rules>
            <name>OwnerIsQueue</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>$Record.Owner:Group.Id</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>SetPreviousQueueFieldsAssignment</targetReference>
            </connector>
            <label>Owner is Queue</label>
        </rules>
    </decisions>
    <decisions>
        <description>Checks if the Case Contact is known. If it&apos;s not, filter it out cause it&apos;s a Shopper.</description>
        <name>Shopper</name>
        <label>Shopper?</label>
        <locationX>314</locationX>
        <locationY>1895</locationY>
        <defaultConnector>
            <targetReference>Found</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Default Outcome</defaultConnectorLabel>
        <rules>
            <name>YesShopper</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>$Record.ContactId</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>true</booleanValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>$Record.Origin</leftValueReference>
                <operator>Contains</operator>
                <rightValue>
                    <stringValue>Email</stringValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>QueryShopperAllowedQueues</targetReference>
            </connector>
            <label>Yes</label>
        </rules>
    </decisions>
    <decisions>
        <description>Checks if the status is changed to &apos;Waiting for Merchant&apos; or another.</description>
        <name>Status</name>
        <label>Status?</label>
        <locationX>1150</locationX>
        <locationY>1595</locationY>
        <defaultConnector>
            <targetReference>Queue</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Other</defaultConnectorLabel>
        <rules>
            <name>WaitingForMerchant</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>$Record.Status</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Waiting for Merchant</stringValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>StartCounting</targetReference>
            </connector>
            <doesRequireRecordChangedToMeetCriteria>true</doesRequireRecordChangedToMeetCriteria>
            <label>Waiting for Merchant</label>
        </rules>
        <rules>
            <name>from_Completed_to_In_Progress</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>$Record.Status</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>In Progress</stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>$Record__Prior.Status</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Completed</stringValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>TimeReopened</targetReference>
            </connector>
            <label>from &apos;Completed&apos; to &apos;In Progress&apos;</label>
        </rules>
        <rules>
            <name>NewHandoverStatus</name>
            <conditionLogic>(1 OR 2) AND 3 AND 4 AND 5 AND 6</conditionLogic>
            <conditions>
                <leftValueReference>$Record.Status</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>New</stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>$Record.Status</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Handover</stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>$Record.OwnerId</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <elementReference>$Record.Owner:User.Id</elementReference>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>$Record__Prior.OwnerId</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <elementReference>$Record__Prior.Owner:Group.Id</elementReference>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>$Record.Status</leftValueReference>
                <operator>IsChanged</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>$Record.OwnerId</leftValueReference>
                <operator>IsChanged</operator>
                <rightValue>
                    <booleanValue>true</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>ToInProgress</targetReference>
            </connector>
            <label>New/Handover</label>
        </rules>
    </decisions>
    <decisions>
        <description>Does the case has sub-type?</description>
        <name>SubType</name>
        <label>Sub-Type?</label>
        <locationX>501</locationX>
        <locationY>4103</locationY>
        <defaultConnector>
            <targetReference>TypeComplexity</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>no Sub-Type</defaultConnectorLabel>
        <rules>
            <name>CaseSubType</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>$Record.SubType__c</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>Topic</targetReference>
            </connector>
            <label>Case Sub-Type</label>
        </rules>
    </decisions>
    <decisions>
        <description>Does the case has topic?</description>
        <name>Topic</name>
        <label>Topic?</label>
        <locationX>303</locationX>
        <locationY>4211</locationY>
        <defaultConnector>
            <targetReference>SubType_TypeComplexity</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>no Topic</defaultConnectorLabel>
        <rules>
            <name>CaseTopic</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>$Record.ServiceTopic__c</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>TopicSubType_TypeComplexity</targetReference>
            </connector>
            <label>Case Topic</label>
        </rules>
    </decisions>
    <decisions>
        <description>Does the case has type?</description>
        <name>Type</name>
        <label>Type?</label>
        <locationX>732</locationX>
        <locationY>3995</locationY>
        <defaultConnector>
            <targetReference>Empty</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>no Complexity</defaultConnectorLabel>
        <rules>
            <name>CaseType</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>$Record.Type</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>SubType</targetReference>
            </connector>
            <label>Case Type</label>
        </rules>
    </decisions>
    <decisions>
        <description>Visibility in Portal is only updated when the service case is created, or the record type is changed to service type.</description>
        <name>UpdateVisibilityInPortal</name>
        <label>Update Visibility In Portal?</label>
        <locationX>446</locationX>
        <locationY>803</locationY>
        <defaultConnector>
            <targetReference>ActionType</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>No</defaultConnectorLabel>
        <rules>
            <name>Yes</name>
            <conditionLogic>or</conditionLogic>
            <conditions>
                <leftValueReference>$Record.RecordTypeId</leftValueReference>
                <operator>IsChanged</operator>
                <rightValue>
                    <booleanValue>true</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>SetVisibleInPortal</targetReference>
            </connector>
            <label>Yes</label>
        </rules>
    </decisions>
    <decisions>
        <description>Checks if the case should apply the region routing</description>
        <name>UseRegionRoutingFields</name>
        <label>Use Region Routing?</label>
        <locationX>732</locationX>
        <locationY>5387</locationY>
        <defaultConnector>
            <targetReference>ClearRegionRouting</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>No</defaultConnectorLabel>
        <rules>
            <name>ApplyRegionRouting</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>$Record.UseRegionForRouting__c</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <booleanValue>true</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>SetRegionRouting</targetReference>
            </connector>
            <label>Apply Region Routing</label>
        </rules>
    </decisions>
    <description>Stamp customer segmentation value on case.</description>
    <environments>Default</environments>
    <formulas>
        <description>Set priority to Normal if the field is not populated yet.</description>
        <name>defaultPriorityNormal</name>
        <dataType>String</dataType>
        <expression>{! IF (ISBLANK(TEXT($Record.Priority)), &apos;Normal&apos;, TEXT($Record.Priority)) }</expression>
    </formulas>
    <formulas>
        <description>If the case is related to an account, it copies the value from the account. Otherwise, the value will be empty.</description>
        <name>forCustomerSegmentation</name>
        <dataType>String</dataType>
        <expression>IF(ISNULL({!$Record.AccountId}), null, TEXT({!$Record.Account.ServiceLevel__c}))</expression>
    </formulas>
    <formulas>
        <description>Is the record created?</description>
        <name>onCreate</name>
        <dataType>Boolean</dataType>
        <expression>ISNEW()</expression>
    </formulas>
    <formulas>
        <description>Returns the domain of the sender&apos;s email address.</description>
        <name>senderDomain</name>
        <dataType>String</dataType>
        <expression>RIGHT({!$Record.SuppliedEmail}, LEN({!$Record.SuppliedEmail}) - FIND(&quot;@&quot;,{!$Record.SuppliedEmail}))</expression>
    </formulas>
    <formulas>
        <name>SuppliedEmailDomain</name>
        <dataType>String</dataType>
        <expression>SUBSTITUTE({!$Record.SuppliedEmail}, LEFT({!$Record.SuppliedEmail}, FIND(&quot;@&quot;, {!$Record.SuppliedEmail})), NULL)</expression>
    </formulas>
    <formulas>
        <description>If priority on the case is Urgent, that priority will not be overwritten. Otherwise the priority will be set to High.</description>
        <name>upgradePriorityToHigh</name>
        <dataType>String</dataType>
        <expression>{!IF (TEXT($Record.Priority) == &apos;Urgent&apos;, TEXT($Record.Priority), &apos;High&apos;)}</expression>
    </formulas>
    <formulas>
        <description>If priority on the case is Urgent or High, that priority will not be overwritten. Otherwise the priority will be set to Medium</description>
        <name>upgradePriorityToMedium</name>
        <dataType>String</dataType>
        <expression>{!IF (TEXT($Record.Priority) == &apos;Urgent&apos; || TEXT($Record.Priority) == &apos;High&apos;, TEXT($Record.Priority), &apos;Medium&apos;)}</expression>
    </formulas>
    <interviewLabel>Before-Save Case Management (Services) {!$Flow.CurrentDateTime}</interviewLabel>
    <label>Before-Save Case Management (Services)</label>
    <loops>
        <description>Check if the blocking list records are applicable to this case.</description>
        <name>CheckBlockingList</name>
        <label>Check Blocking List</label>
        <locationX>314</locationX>
        <locationY>2819</locationY>
        <collectionReference>SearchBlockingList</collectionReference>
        <iterationOrder>Asc</iterationOrder>
        <nextValueConnector>
            <targetReference>BlockCase</targetReference>
        </nextValueConnector>
        <noMoreValuesConnector>
            <targetReference>CreateViaWebform</targetReference>
        </noMoreValuesConnector>
    </loops>
    <processMetadataValues>
        <name>BuilderType</name>
        <value>
            <stringValue>LightningFlowBuilder</stringValue>
        </value>
    </processMetadataValues>
    <processMetadataValues>
        <name>CanvasMode</name>
        <value>
            <stringValue>AUTO_LAYOUT_CANVAS</stringValue>
        </value>
    </processMetadataValues>
    <processMetadataValues>
        <name>OriginBuilderType</name>
        <value>
            <stringValue>LightningFlowBuilder</stringValue>
        </value>
    </processMetadataValues>
    <processType>AutoLaunchedFlow</processType>
    <recordLookups>
        <name>FindDomain</name>
        <label>Find Domain</label>
        <locationX>182</locationX>
        <locationY>2111</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>Found</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>Domain__c</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>senderDomain</elementReference>
            </value>
        </filters>
        <object>ShopperDomains__mdt</object>
        <outputAssignments>
            <assignToReference>matchingDomain</assignToReference>
            <field>Domain__c</field>
        </outputAssignments>
    </recordLookups>
    <recordLookups>
        <description>Get user &apos;Unmanaged&apos; to assign shopper cases.</description>
        <name>GetUnmanagedUser</name>
        <label>Get Unmanaged User</label>
        <locationX>50</locationX>
        <locationY>2411</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>StatusOwnerChanged</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>CommunityNickname</field>
            <operator>EqualTo</operator>
            <value>
                <stringValue>unmanaged</stringValue>
            </value>
        </filters>
        <filters>
            <field>IsActive</field>
            <operator>EqualTo</operator>
            <value>
                <booleanValue>true</booleanValue>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>User</object>
        <queriedFields>Id</queriedFields>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordLookups>
        <description>Query the Custom Metadata table that contains all queues that are allowed to handle shopper cases.</description>
        <name>QueryShopperAllowedQueues</name>
        <label>Query Shopper Allowed Queues</label>
        <locationX>182</locationX>
        <locationY>2003</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>FindDomain</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>QueueDeveloperName__c</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>$Record.Owner:Group.DeveloperName</elementReference>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>ShopperAllowedQueues__mdt</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordLookups>
        <name>SearchBlockingList</name>
        <label>Search Blocking List</label>
        <locationX>314</locationX>
        <locationY>2711</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>CheckBlockingList</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>EmailAddress__c</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>$Record.SuppliedEmail</elementReference>
            </value>
        </filters>
        <filters>
            <field>EmailAddress__c</field>
            <operator>IsNull</operator>
            <value>
                <booleanValue>false</booleanValue>
            </value>
        </filters>
        <filters>
            <field>Active__c</field>
            <operator>EqualTo</operator>
            <value>
                <booleanValue>true</booleanValue>
            </value>
        </filters>
        <getFirstRecordOnly>false</getFirstRecordOnly>
        <object>BlockingList__c</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordLookups>
        <description>The Case Complexity is defined based on the Case Type and Sub-Type values.</description>
        <name>SubType_TypeComplexity</name>
        <label>Sub-Type &amp; Type Complexity</label>
        <locationX>435</locationX>
        <locationY>4319</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>UpdateComplexity</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>Type__c</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>$Record.Type</elementReference>
            </value>
        </filters>
        <filters>
            <field>SubType__c</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>$Record.SubType__c</elementReference>
            </value>
        </filters>
        <filters>
            <field>ServiceTopic__c</field>
            <operator>EqualTo</operator>
            <value>
                <stringValue></stringValue>
            </value>
        </filters>
        <object>CaseComplexity__mdt</object>
        <outputAssignments>
            <assignToReference>complexityScore</assignToReference>
            <field>Complexity__c</field>
        </outputAssignments>
    </recordLookups>
    <recordLookups>
        <description>The Case Complexity is defined based on the Case Type, Case Sub-Type and Case Topic values.</description>
        <name>TopicSubType_TypeComplexity</name>
        <label>Topic, Sub-Type &amp; Type Complexity</label>
        <locationX>171</locationX>
        <locationY>4319</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>UpdateComplexity</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>Type__c</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>$Record.Type</elementReference>
            </value>
        </filters>
        <filters>
            <field>SubType__c</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>$Record.SubType__c</elementReference>
            </value>
        </filters>
        <filters>
            <field>ServiceTopic__c</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>$Record.ServiceTopic__c</elementReference>
            </value>
        </filters>
        <object>CaseComplexity__mdt</object>
        <outputAssignments>
            <assignToReference>complexityScore</assignToReference>
            <field>Complexity__c</field>
        </outputAssignments>
    </recordLookups>
    <recordLookups>
        <description>The Case Complexity is defined based on the Case Type value only.</description>
        <name>TypeComplexity</name>
        <label>Type Complexity</label>
        <locationX>699</locationX>
        <locationY>4211</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>UpdateComplexity</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>Type__c</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>$Record.Type</elementReference>
            </value>
        </filters>
        <filters>
            <field>SubType__c</field>
            <operator>EqualTo</operator>
            <value>
                <stringValue></stringValue>
            </value>
        </filters>
        <filters>
            <field>ServiceTopic__c</field>
            <operator>EqualTo</operator>
            <value>
                <stringValue></stringValue>
            </value>
        </filters>
        <object>CaseComplexity__mdt</object>
        <outputAssignments>
            <assignToReference>complexityScore</assignToReference>
            <field>Complexity__c</field>
        </outputAssignments>
    </recordLookups>
    <recordUpdates>
        <description>Update the case record.</description>
        <name>BlockCaseUpdate</name>
        <label>Block Case</label>
        <locationX>402</locationX>
        <locationY>3035</locationY>
        <connector>
            <targetReference>CheckBlockingList</targetReference>
        </connector>
        <inputAssignments>
            <field>AutoCloseReason__c</field>
            <value>
                <stringValue>Blocked Email</stringValue>
            </value>
        </inputAssignments>
        <inputAssignments>
            <field>Autoclosed__c</field>
            <value>
                <booleanValue>true</booleanValue>
            </value>
        </inputAssignments>
        <inputAssignments>
            <field>Status</field>
            <value>
                <stringValue>Completed</stringValue>
            </value>
        </inputAssignments>
        <inputReference>$Record</inputReference>
    </recordUpdates>
    <recordUpdates>
        <description>Mark the case as a shopper case. Do not auto close.</description>
        <name>MarkAsShopperCaseNoActions</name>
        <label>Mark as shopper case - no actions</label>
        <locationX>314</locationX>
        <locationY>2411</locationY>
        <connector>
            <targetReference>SearchBlockingList</targetReference>
        </connector>
        <inputAssignments>
            <field>IsShopperCase__c</field>
            <value>
                <booleanValue>true</booleanValue>
            </value>
        </inputAssignments>
        <inputAssignments>
            <field>ShopperCaseAllowed__c</field>
            <value>
                <booleanValue>true</booleanValue>
            </value>
        </inputAssignments>
        <inputReference>$Record</inputReference>
    </recordUpdates>
    <recordUpdates>
        <description>This element updates the case status to &apos;Completed&apos; and the case owner to user &apos;Unmanaged&apos;.</description>
        <name>StatusOwnerChanged</name>
        <label>Status &amp; Owner changed</label>
        <locationX>50</locationX>
        <locationY>2519</locationY>
        <connector>
            <targetReference>SearchBlockingList</targetReference>
        </connector>
        <inputAssignments>
            <field>AutoCloseReason__c</field>
            <value>
                <stringValue>Shopper Case</stringValue>
            </value>
        </inputAssignments>
        <inputAssignments>
            <field>Autoclosed__c</field>
            <value>
                <booleanValue>true</booleanValue>
            </value>
        </inputAssignments>
        <inputAssignments>
            <field>IsShopperCase__c</field>
            <value>
                <booleanValue>true</booleanValue>
            </value>
        </inputAssignments>
        <inputAssignments>
            <field>OwnerId</field>
            <value>
                <elementReference>GetUnmanagedUser.Id</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <field>Status</field>
            <value>
                <stringValue>Completed</stringValue>
            </value>
        </inputAssignments>
        <inputReference>$Record</inputReference>
    </recordUpdates>
    <start>
        <locationX>89</locationX>
        <locationY>0</locationY>
        <connector>
            <targetReference>MigrationUser</targetReference>
        </connector>
        <object>Case</object>
        <recordTriggerType>CreateAndUpdate</recordTriggerType>
        <triggerType>RecordBeforeSave</triggerType>
    </start>
    <status>Active</status>
    <variables>
        <name>complexityScore</name>
        <dataType>String</dataType>
        <isCollection>false</isCollection>
        <isInput>true</isInput>
        <isOutput>false</isOutput>
    </variables>
    <variables>
        <name>currentItemFromSourceCollection</name>
        <dataType>SObject</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
        <objectType>Contact</objectType>
    </variables>
    <variables>
        <description>Keeps the result queried from the shopper domain list.</description>
        <name>matchingDomain</name>
        <dataType>String</dataType>
        <isCollection>false</isCollection>
        <isInput>true</isInput>
        <isOutput>false</isOutput>
    </variables>
</Flow>
