//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are not valid in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

public class ZendeskCommentsResponse {

	public class Comments {
		public List<Attachments> attachments {get;set;} 
		public Long audit_id {get;set;} 
		public Long author_id {get;set;} 
		public String body {get;set;} 
		public DateTime created_at {get;set;} 
		public Long id {get;set;} 
		public Metadata metadata {get;set;} 
		public Boolean public_Z {get;set;} // in json: public
		public String type {get;set;} 
        public String html_body; 
        public String plain_body;
        public Via via {get;set;}

		public Comments(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'attachments') {
							attachments = arrayOfAttachments(parser);
						} else if (text == 'audit_id') {
							audit_id = parser.getLongValue();
						} else if (text == 'author_id') {
							author_id = parser.getLongValue();
						} else if (text == 'body') {
							body = parser.getText();
						} else if (text == 'html_body') {
							html_body = parser.getText();
						} else if (text == 'plain_body') {
							plain_body = parser.getText();
						} else if (text == 'created_at') {
							//created_at = parser.getText();
                            created_at = parser.getDateTimeValue();
						} else if (text == 'id') {
							id = parser.getLongValue();
						} else if (text == 'metadata') {
							metadata = new Metadata(parser);
						} else if (text == 'public') {
							public_Z = parser.getBooleanValue();
						} else if (text == 'type') {
							type = parser.getText();
						}  else if (text == 'via') {
							via = new Via(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Comments consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Metadata {
		public System_Z system_Z {get;set;} // in json: system
		public Via via {get;set;} 

		public Metadata(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'system') {
							system_Z = new System_Z(parser);
						} else if (text == 'via') {
							via = new Via(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Metadata consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class System_Z {
		public String client {get;set;} 
		public String ip_address {get;set;} 
		public Double latitude {get;set;} 
		public String location {get;set;} 
		public Double longitude {get;set;} 

		public System_Z(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'client') {
							client = parser.getText();
						} else if (text == 'ip_address') {
							ip_address = parser.getText();
						} else if (text == 'latitude') {
							latitude = parser.getDoubleValue();
						} else if (text == 'location') {
							location = parser.getText();
						} else if (text == 'longitude') {
							longitude = parser.getDoubleValue();
						} else {
							System.debug(LoggingLevel.WARN, 'System_Z consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Thumbnails {

		public Thumbnails(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						{
							System.debug(LoggingLevel.WARN, 'Thumbnails consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Attachments {
		public String content_type {get;set;} 
		public String content_url {get;set;} 
		public String mapped_content_url {get;set;}         
		public String file_name {get;set;} 
		public Long id {get;set;} 
		public Integer size {get;set;} 
		public List<Thumbnails> thumbnails {get;set;} 

		public Attachments(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'content_type') {
							content_type = parser.getText();
						} else if (text == 'content_url') {
							content_url = parser.getText();
						} else if (text == 'mapped_content_url') {
							mapped_content_url = parser.getText();
						} else if (text == 'file_name') {
							file_name = parser.getText();
						} else if (text == 'id') {
							id = parser.getLongValue();
						} else if (text == 'size') {
							size = parser.getIntegerValue();
						} else if (text == 'thumbnails') {
							thumbnails = arrayOfThumbnails(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Attachments consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
    public class EmailData {
		public String address {get;set;} // in json: from
		public String name {get;set;} 

		public EmailData(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'address') {
							address = parser.getText();
						} else if (text == 'name') {
							name = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Source consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
    
	public class Source {
		public EmailData from_Z {get;set;} // in json: from
		public String rel {get;set;} 
		public EmailData to {get;set;} 

		public Source(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'from') {
							from_Z = new EmailData(parser);
						} else if (text == 'rel') {
							rel = parser.getText();
						} else if (text == 'to') {
							to = new EmailData(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Source consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public List<Comments> comments {get;set;} 

	public ZendeskCommentsResponse(JSONParser parser) {
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
					if (text == 'comments') {
						comments = arrayOfComments(parser);
					} else {
						System.debug(LoggingLevel.WARN, 'ZendeskCommentsResponse consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}
	
	public class Via {
		public String channel {get;set;} 
		public Source source {get;set;} 

		public Via(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'channel') {
							channel = parser.getText();
						} else if (text == 'source') {
							source = new Source(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Via consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	
	public static ZendeskCommentsResponse parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return new ZendeskCommentsResponse(parser);
	}
	
	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}
	



    private static List<Comments> arrayOfComments(System.JSONParser p) {
        List<Comments> res = new List<Comments>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Comments(p));
        }
        return res;
    }




    private static List<Attachments> arrayOfAttachments(System.JSONParser p) {
        List<Attachments> res = new List<Attachments>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Attachments(p));
        }
        return res;
    }








    private static List<Thumbnails> arrayOfThumbnails(System.JSONParser p) {
        List<Thumbnails> res = new List<Thumbnails>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Thumbnails(p));
        }
        return res;
    }



}